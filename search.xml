<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>静态代码扫描--Fortify</title>
      <link href="/BlogHome/posts/3bf74ee5.html"/>
      <url>/BlogHome/posts/3bf74ee5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="静态代码扫描–Fortify"><a href="#静态代码扫描–Fortify" class="headerlink" title="静态代码扫描–Fortify"></a>静态代码扫描–Fortify</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>fottify 全名叫：Fortify SCA ，是HP的产品 ，是一个静态的、白盒的软件源代码安全测试工具。它通过内置的五大主要分析引擎：数据流、语义、结构、控制流、配置流等对应用软件的源代码进行静态的分析，分析的过程中与它特有的软件安全漏洞规则集进行全面地匹配、查找，从而将源代码中存在的安全漏洞扫描出来，并给予整理报告。扫描的结果包含详细的安全漏洞信息、安全知识说明、修复意见。</p><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><pre class="line-numbers language-none"><code class="language-none">链接:https://pan.baidu.com/s/1Jw7idUwlfMZwX4eTb-9luw 提取码:w6dn压缩密码：shungg.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320225720854.png" alt="image-20220320225629409"></p><p>在弹出的license界面，选择fortify.license(如下图)</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320230210596.png" alt="image-20220320225720854"></p><p>在最后一步取消关于更新软件的选项</p><p>安装完后，将下图更新到安装目录：../Core/lib</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320225629409.png" alt="image-20220320230010846"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320230010846.png" alt="image-20220320230123389"></p><p>接着，将规则等文件复制到：../Core/config/</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320230123389.png" alt="image-20220320230210596"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320230256932.png" alt="image-20220320230256932"></p><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h4><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320230402041.png" alt="image-20220320230402041"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320230813337.png" alt="image-20220320230813337"></p><p>使用自带sample→richs.java</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320230910718.png" alt="image-20220320230853747"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320230930706.png" alt="image-20220320230910718"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320230853747.png" alt="image-20220320230930706"></p><p>扫描完后：</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320230453259.png" alt="image-20220320230453259"></p><p>生成报告：Tools→Reports→xxx</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320230737950.png" alt="image-20220320230737950"></p>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码扫描 </tag>
            
            <tag> Fortify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web漏洞工具使用--ZAP</title>
      <link href="/BlogHome/posts/f3a5aa1f.html"/>
      <url>/BlogHome/posts/f3a5aa1f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="web漏洞工具使用–ZAP"><a href="#web漏洞工具使用–ZAP" class="headerlink" title="web漏洞工具使用–ZAP"></a>web漏洞工具使用–ZAP</h2><h4 id="1-ZAP直接使用浏览器"><a href="#1-ZAP直接使用浏览器" class="headerlink" title="1. ZAP直接使用浏览器"></a>1. ZAP直接使用浏览器</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.问题：点击浏览器没有反应，是浏览器驱动版本不对路径：C:\Users\yizhenfeng\OWASP ZAP\webdriver\windows\32或者C:\Users\yizhenfeng\OWASP ZAP\webdriver\windows\64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320171925501.png" alt="image-20220320171925501"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320182134281.png" alt="image-20220320172100929"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320182352007.png" alt="image-20220320182134281"></p><p>驱动下载地址：<a href="https://registry.npmmirror.com/binary.html?path=chromedriver/">https://registry.npmmirror.com/binary.html?path=chromedriver/</a></p><p>​                            <a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></p><p>浏览器与驱动版本：<a href="https://liushilive.github.io/github_selenium_drivers/md/Firefox.html">https://liushilive.github.io/github_selenium_drivers/md/Firefox.html</a></p><p>火狐浏览器历史版本下载：<a href="http://ftp.mozilla.org/pub/firefox/releases/">http://ftp.mozilla.org/pub/firefox/releases/</a></p><h6 id="浏览器禁止更新"><a href="#浏览器禁止更新" class="headerlink" title="浏览器禁止更新"></a>浏览器禁止更新</h6><p>火狐：（断网安装后，设置）</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320183755916.png" alt="image-20220320182352007"></p><p>修改：</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320172100929.png" alt="image-20220320182444267"></p><p>谷歌：</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320183201295.png" alt="image-20220320183201295"></p><p>注意：如果是自定义路径安装，需要将安装路径添加都系统环境变量中</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320182444267.png" alt="image-20220320190343970"></p><h4 id="2-ZAP使用代理"><a href="#2-ZAP使用代理" class="headerlink" title="2. ZAP使用代理"></a>2. ZAP使用代理</h4><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320183728465.png" alt="image-20220320183755916"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320190343970.png" alt="image-20220320183728465"></p><p>导入证书：</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320183957551.png" alt="image-20220320183847394"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320183938348.png" alt="image-20220320183938348"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320183847394.png" alt="image-20220320183957551"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320184022750.png" alt="image-20220320184022750"></p><h4 id="3-直接手工启动浏览器"><a href="#3-直接手工启动浏览器" class="headerlink" title="3. 直接手工启动浏览器"></a>3. 直接手工启动浏览器</h4><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320211146206.png" alt="image-20220320211146206"></p><h4 id="4-fuzzer（对报告中某个sql注入或者xss问题的请求，进行包括SQL注入，xss攻击等验证）"><a href="#4-fuzzer（对报告中某个sql注入或者xss问题的请求，进行包括SQL注入，xss攻击等验证）" class="headerlink" title="4. fuzzer（对报告中某个sql注入或者xss问题的请求，进行包括SQL注入，xss攻击等验证）"></a>4. fuzzer（对报告中某个sql注入或者xss问题的请求，进行包括SQL注入，xss攻击等验证）</h4><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320214635827.png" alt="image-20220320214635827"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320214717027.png" alt="image-20220320214717027"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320214838661.png" alt="image-20220320214730631"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320214730631.png" alt="image-20220320214838661"></p>]]></content>
      
      
      <categories>
          
          <category> 安全测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
            <tag> ZAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全测试点总结</title>
      <link href="/BlogHome/posts/a3407de0.html"/>
      <url>/BlogHome/posts/a3407de0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre class="line-numbers language-tiki" data-language="tiki"><div class="caption"><span>wiki</span></div><code class="language-tiki">Pikachu上的漏洞类型列表如下：    Burt Force(暴力破解漏洞)    XSS(跨站脚本漏洞)    CSRF(跨站请求伪造)    SQL-Inject(SQL注入漏洞)    RCE(远程命令/代码执行)    Files Inclusion(文件包含漏洞)    Unsafe file downloads(不安全的文件下载)    Unsafe file uploads(不安全的文件上传)    Over Permisson(越权漏洞)    ../../../(目录遍历)    I can see your ABC(敏感信息泄露)    PHP反序列化漏洞    XXE(XML External Entity attack)    不安全的URL重定向    SSRF(Server-Side Request Forgery)    More...(找找看?..有彩蛋!)    管理工具里面提供了一个简易的xss管理后台,供你测试钓鱼和捞cookie~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320110458365.png" alt="image-20220320110458365"></p><p>链接：<a href="https://pan.baidu.com/s/1RzsYwYbEdP3Y-ALd17Fq_w">https://pan.baidu.com/s/1RzsYwYbEdP3Y-ALd17Fq_w</a><br>提取码：Q5gc</p>]]></content>
      
      
      <categories>
          
          <category> 安全测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web漏洞介绍--XSS</title>
      <link href="/BlogHome/posts/9b168a6f.html"/>
      <url>/BlogHome/posts/9b168a6f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre class="line-numbers language-tiki" data-language="tiki"><div class="caption"><span>wiki</span></div><code class="language-tiki">XSS（跨站脚本）概述    Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写"CSS"冲突，故又称XSS。一般XSS可以分为如下几种常见类型：        1.反射性XSS;         2.存储型XSS;        3.DOM型XSS;    XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP TOP10的排名中一直属于前三的江湖地位。    XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。    形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。    因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理:      输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入;      输出转义：根据输出点的位置对输出到前端的内容进行适当转义;测试技巧：（一般使用Appcsan或者ZAP工具扫描）1.&lt;script&gt;alert("a");&lt;/script&gt;2.&lt;script&gt;alert(document.cookie);&lt;/script&gt;3.javascript:alert("a")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web漏洞介绍--CSRF</title>
      <link href="/BlogHome/posts/e2880b4.html"/>
      <url>/BlogHome/posts/e2880b4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="web漏洞介绍–CSRF"><a href="#web漏洞介绍–CSRF" class="headerlink" title="web漏洞介绍–CSRF"></a>web漏洞介绍–CSRF</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><pre class="line-numbers language-tiki" data-language="tiki"><div class="caption"><span>wiki</span></div><code class="language-tiki">CSRF(跨站请求伪造)概述    Cross-site request forgery 简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为"one click"攻击。 很多人搞不清楚CSRF的概念，甚至有时候会将其和XSS混淆,更有甚者会将其和越权问题混为一谈,这都是对原理没搞清楚导致的。    这里列举一个场景解释一下，希望能够帮助你理解。    场景需求：    小黑想要修改大白在购物网站tianxiewww.xx.com上填写的会员地址。    先看下大白是如何修改自己的密码的：    登录---修改会员信息，提交请求---修改成功。    所以小黑想要修改大白的信息，他需要拥有：1，登录权限 2，修改个人信息的请求。    但是大白又不会把自己xxx网站的账号密码告诉小黑，那小黑怎么办？    于是他自己跑到www.xx.com上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail地址），他发现修改的请求是：    【http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change】    于是，他实施了这样一个操作：把这个链接伪装一下，在小白登录xxx网站后，欺骗他进行点击，小白点击这个链接后，个人信息就被修改了,小黑就完成了攻击目的。    为啥小黑的操作能够实现呢。有如下几个关键点：    1.www.xxx.com这个网站在用户修改个人的信息时没有过多的校验，导致这个请求容易被伪造;    ---因此，我们判断一个网站是否存在CSRF漏洞，其实就是判断其对关键信息（比如密码等敏感信息）的操作(增删改)是否容易被伪造。    2.小白点击了小黑发给的链接，并且这个时候小白刚好登录在购物网上;    ---如果小白安全意识高，不点击不明链接，则攻击不会成功，又或者即使小白点击了链接，但小白此时并没有登录购物网站，也不会成功。    ---因此，要成功实施一次CSRF攻击，需要“天时，地利，人和”的条件。    当然，如果小黑事先在xxx网的首页如果发现了一个XSS漏洞，则小黑可能会这样做： 欺骗小白访问埋伏了XSS脚本（盗取cookie的脚本）的页面，小白中招，小黑拿到小白的cookie，然后小黑顺利登录到小白的后台，小黑自己修改小白的相关信息。    ---所以跟上面比一下，就可以看出CSRF与XSS的区别：CSRF是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而XSS是直接盗取到了用户的权限，然后实施破坏。     因此，网站如果要防止CSRF攻击，则需要对敏感信息的操作实施对应的安全措施，防止这些操作出现被伪造的情况，从而导致CSRF。比如：    --对敏感信息的操作增加安全的token；    --对敏感信息的操作增加安全的验证码；    --对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h4><h5 id="1-选择靶场（Pikachu）"><a href="#1-选择靶场（Pikachu）" class="headerlink" title="1 选择靶场（Pikachu）"></a>1 选择靶场（Pikachu）</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.使用docker创建docker pull area39/pikachudocker run -d -p 9002:80 area39/pikachu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-安装-Burp-Suite-pro"><a href="#2-安装-Burp-Suite-pro" class="headerlink" title="2 安装 Burp Suite pro"></a>2 安装 Burp Suite pro</h5><pre class="line-numbers language-none"><code class="language-none">1.参考：https://www.cnblogs.com/zewutest/p/13895187.html2.安装证书<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>导出证书</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320103019979.png" alt="image-20220320103019979"></p><p>浏览器安装证书</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320103127847.png" alt="image-20220320103127847"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320103151177.png" alt="image-20220320103151177"></p><p>设置代理</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320102755503.png" alt="image-20220320103311641"></p><p>设置过滤</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320103907570.png" alt="image-20220320103353963"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320102720085.png" alt="image-20220320103429326"></p><p>勾选 show only in-scope</p><p>设置拦截(显示off：不拦截；on：拦截）</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320103311641.png" alt="image-20220320103723417"></p><h5 id="3-建议使用浏览器（代理千万不要使用chrome，很坑）"><a href="#3-建议使用浏览器（代理千万不要使用chrome，很坑）" class="headerlink" title="3 建议使用浏览器（代理千万不要使用chrome，很坑）"></a>3 建议使用浏览器（代理千万不要使用chrome，很坑）</h5><pre class="line-numbers language-none"><code class="language-none">1.安装插件Foxy Proxy2.设置代理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320103429326.png" alt="image-20220320102720085"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320103723417.png" alt="image-20220320102755503"></p><h5 id="4-提交数据"><a href="#4-提交数据" class="headerlink" title="4  提交数据"></a>4  提交数据</h5><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320104051404.png" alt="image-20220320103907570"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320103353963.png" alt="image-20220320104051404"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320104313345.png" alt="image-20220320104232244"></p><p>方法一：test in browser</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320104232244.png" alt="image-20220320104313345"></p><p>方法二：copy后，新建一个.html，在浏览器中打开</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320104344955.png" alt="image-20220320104344955"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320104505930.png" alt="image-20220320104505930"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320104548709.png" alt="image-20220320104528296"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220320104528296.png" alt="image-20220320104548709"></p>]]></content>
      
      
      <categories>
          
          <category> 安全测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python常用程序--os库使用记录</title>
      <link href="/BlogHome/posts/9723cdf3.html"/>
      <url>/BlogHome/posts/9723cdf3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="os库使用记录"><a href="#os库使用记录" class="headerlink" title="os库使用记录"></a>os库使用记录</h3><h4 id="1-os-walk-dir"><a href="#1-os-walk-dir" class="headerlink" title="1. os.walk(dir)"></a>1. os.walk(dir)</h4><h5 id="1-1-列出该目录下所有文件的路径"><a href="#1-1-列出该目录下所有文件的路径" class="headerlink" title="1.1 列出该目录下所有文件的路径"></a>1.1 列出该目录下所有文件的路径</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token builtin">dir</span><span class="token operator">=</span><span class="token string">r'D:\Pycharm\TestProject\FaceDownScript\data'</span><span class="token keyword">for</span> root<span class="token punctuation">,</span>dirs<span class="token punctuation">,</span>files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> file_name <span class="token keyword">in</span> files<span class="token punctuation">:</span>        file_path<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span>file_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220319135834525.png" alt="image-20220319135834525"></p><h5 id="1-2-列出该目录下的所有子目录"><a href="#1-2-列出该目录下的所有子目录" class="headerlink" title="1.2 列出该目录下的所有子目录"></a>1.2 列出该目录下的所有子目录</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token builtin">dir</span><span class="token operator">=</span><span class="token string">r'D:\Pycharm\TestProject\FaceDownScript\data'</span><span class="token keyword">for</span> root<span class="token punctuation">,</span>dirs<span class="token punctuation">,</span>files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> <span class="token builtin">dir</span> <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>        file_path<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220319140432758.png" alt="image-20220319140432758"></p><h5 id="1-3-列出该目录下文件后缀为xx的文件"><a href="#1-3-列出该目录下文件后缀为xx的文件" class="headerlink" title="1.3 列出该目录下文件后缀为xx的文件"></a>1.3 列出该目录下文件后缀为xx的文件</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token builtin">dir</span><span class="token operator">=</span><span class="token string">r'D:\Pycharm\TestProject\FaceDownScript\data'</span><span class="token keyword">for</span> root<span class="token punctuation">,</span>dirs<span class="token punctuation">,</span>files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> file_name <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">file</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".zip"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        file_path<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span>file_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> os库 </tag>
            
            <tag> 目录遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python常用程序--requests库使用记录</title>
      <link href="/BlogHome/posts/5765e39f.html"/>
      <url>/BlogHome/posts/5765e39f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Requests库标准模块使用记录"><a href="#Requests库标准模块使用记录" class="headerlink" title="Requests库标准模块使用记录"></a>Requests库标准模块使用记录</h3><h4 id="1-post请求，与Postman比对"><a href="#1-post请求，与Postman比对" class="headerlink" title="1. post请求，与Postman比对"></a>1. post请求，与Postman比对</h4><h5 id="1-1-form-data上传文件及其他参数"><a href="#1-1-form-data上传文件及其他参数" class="headerlink" title="1.1 form_data上传文件及其他参数"></a>1.1 form_data上传文件及其他参数</h5><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image1-20220319125844820.png" alt="image-20220319125844820"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestssession<span class="token operator">=</span>requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#会话保持</span>url<span class="token operator">=</span><span class="token string">""</span>data<span class="token operator">=</span><span class="token punctuation">{</span>     <span class="token string">"time"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">}</span>files<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"file"</span><span class="token punctuation">:</span><span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span>  <span class="token string">"Accept-Language"</span><span class="token punctuation">:</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">,</span>  <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36"</span><span class="token punctuation">}</span>res<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>files<span class="token operator">=</span>files<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token comment">#返回结果是json</span>json_str<span class="token operator">=</span>res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#返回结果不是json</span>res<span class="token operator">=</span>res<span class="token punctuation">.</span>content  <span class="token comment"># b'121698'</span>res<span class="token operator">=</span>res<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment">#121698</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-2-params参数加进url，及binary上传文件（注意这种方式上传是没有传“字段”标识，不像form-data前面有字段）"><a href="#1-2-params参数加进url，及binary上传文件（注意这种方式上传是没有传“字段”标识，不像form-data前面有字段）" class="headerlink" title="1.2 params参数加进url，及binary上传文件（注意这种方式上传是没有传“字段”标识，不像form_data前面有字段）"></a>1.2 params参数加进url，及binary上传文件（注意这种方式上传是没有传“字段”标识，不像form_data前面有字段）</h5><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image1-20220319130409175.png" alt="image-20220319130409175"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parsesession<span class="token operator">=</span>requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#会话保持</span>url<span class="token operator">=</span><span class="token string">""</span>params<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"fileName"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span>url<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">'?'</span><span class="token operator">+</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>params<span class="token punctuation">)</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span>  <span class="token string">"Accept-Language"</span><span class="token punctuation">:</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">,</span>  <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36"</span><span class="token punctuation">}</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-3-json参数请求"><a href="#1-3-json参数请求" class="headerlink" title="1.3 json参数请求"></a>1.3 json参数请求</h5><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image1-20220319131002243.png" alt="image-20220319131002243"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestssession<span class="token operator">=</span>requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#会话保持</span>url<span class="token operator">=</span><span class="token string">""</span>data<span class="token operator">=</span><span class="token punctuation">{</span>     <span class="token string">"time"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">}</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span>  <span class="token string">"Accept-Language"</span><span class="token punctuation">:</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">,</span>  <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36"</span><span class="token punctuation">}</span>res<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>json<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-4-x-www-form-urlencoded参数请求"><a href="#1-4-x-www-form-urlencoded参数请求" class="headerlink" title="1.4 x-www-form-urlencoded参数请求"></a>1.4 x-www-form-urlencoded参数请求</h5><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image1-20220319133433492.png" alt="image-20220319132415116"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parsesession<span class="token operator">=</span>requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#会话保持</span>url<span class="token operator">=</span><span class="token string">""</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span>data<span class="token operator">=</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span>  <span class="token string">"Accept-Language"</span><span class="token punctuation">:</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">,</span>  <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36"</span><span class="token punctuation">}</span>res<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image1-20220319132415116.png" alt="image-20220319133158218"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image1-20220319133801635.png" alt="image-20220319133801635"></p><h4 id="2-get请求"><a href="#2-get请求" class="headerlink" title="2. get请求"></a>2. get请求</h4><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image1-20220319133158218.png" alt="image-20220319133433492"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestssession<span class="token operator">=</span>requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#会话保持</span>url<span class="token operator">=</span><span class="token string">""</span>params<span class="token operator">=</span><span class="token punctuation">{</span>     <span class="token string">"time"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">}</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span>  <span class="token string">"Accept-Language"</span><span class="token punctuation">:</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">,</span>  <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36"</span><span class="token punctuation">}</span>res<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>params<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image1-20220319133727080.png" alt="image-20220319133727080"></p>]]></content>
      
      
      <categories>
          
          <category> Python篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests库 </tag>
            
            <tag> http接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali linux系统--工具介绍</title>
      <link href="/BlogHome/posts/a9d9d567.html"/>
      <url>/BlogHome/posts/a9d9d567.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="kali-linux系统"><a href="#kali-linux系统" class="headerlink" title="kali linux系统"></a>kali linux系统</h3><h4 id="nmap：端口扫描"><a href="#nmap：端口扫描" class="headerlink" title="nmap：端口扫描"></a>nmap：端口扫描</h4><h4 id="whatweb：指纹识别扫描"><a href="#whatweb：指纹识别扫描" class="headerlink" title="whatweb：指纹识别扫描"></a>whatweb：指纹识别扫描</h4><h4 id="sqlmap：sql注入扫描"><a href="#sqlmap：sql注入扫描" class="headerlink" title="sqlmap：sql注入扫描"></a>sqlmap：sql注入扫描</h4><h4 id="dirb：目录扫描"><a href="#dirb：目录扫描" class="headerlink" title="dirb：目录扫描"></a>dirb：目录扫描</h4><h4 id="wapiti：直接对页面进行扫描"><a href="#wapiti：直接对页面进行扫描" class="headerlink" title="wapiti：直接对页面进行扫描"></a>wapiti：直接对页面进行扫描</h4>]]></content>
      
      
      <categories>
          
          <category> 安全测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/BlogHome/posts/76be7035.html"/>
      <url>/BlogHome/posts/76be7035.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Hexo搭建个人博客"><a href="#Hexo搭建个人博客" class="headerlink" title="Hexo搭建个人博客"></a>Hexo搭建个人博客</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>你了解 <a href="https://hexo.io/zh-cn/">Hexo</a> 吗？ Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>几个月前偶然间了解到了 Hexo 这个静态博客网站，很适合那些喜欢写作的朋友们，最重要的是它是免费的，里面有许多的博客主题模板，这些主题都是一些很牛的大佬们开发的，而且设计的主题都很棒，让我很心动，心动不如行动，于是开始整理搭建属于自己的博客。直到今天，这中间经历了许多的坎坷荆棘，我将我的博客搭建的流程分享出来，能为那些博客小石榴们提供一些帮助吧，如果有错的话，请给我留言，我会及时修改，废话不多说，直接上教程。</p><h4 id="一、博客环境搭建"><a href="#一、博客环境搭建" class="headerlink" title="一、博客环境搭建"></a>一、博客环境搭建</h4><h5 id="1-下载-Git-和-Node-js"><a href="#1-下载-Git-和-Node-js" class="headerlink" title="1. 下载 Git 和 Node.js"></a>1. 下载 Git 和 Node.js</h5><h6 id="1-1-Node-js的安装与配置"><a href="#1-1-Node-js的安装与配置" class="headerlink" title="1.1 Node.js的安装与配置"></a>1.1 Node.js的安装与配置</h6><p>首先去 <a href="https://nodejs.org/en/download/">Node.js 官网</a> 下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。（建议不要安装太高版本）</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308184620363.png" alt="image-20220308184620363"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308184638109.png" alt="image-20220308184638109"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308184700467.png" alt="image-20220308184700467"></p><p>验证安装，并测试是否加入环境变量：</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308184231896.png" alt="image-20220308184231896"></p><p>建议安装cnpm，两者区别：</p><p><strong>npm（node package manager）</strong>：nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）<br> <strong>cnpm</strong>：是一个完整 npmjs.org 镜像，可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308184851791.png" alt="image-20220308184851791"></p><h6 id="1-2-Git-的安装与配置"><a href="#1-2-Git-的安装与配置" class="headerlink" title="1.2 Git 的安装与配置"></a>1.2 Git 的安装与配置</h6><p>首先就是去 <a href="https://git-scm.com/">Git 官网</a>下载 Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><h5 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h5><ol><li><p>首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为 blogtest 的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择 <code>Git Bash Here</code>，然后依次输入如下命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># hexo框架的安装npm install -g hexo-cli# 等上一个命令完成后，在输入下面的命令hexo init &lt;新建文件夹的名称&gt;  #初始化文件夹（blogtest）cd &lt;新建文件夹的名称&gt;npm install  # 安装博客所需要的依赖文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>等待运行完成，此时文件夹中多了许多文件。 <strong>注意</strong>：<strong>后续的命令均需要在站点目录下（即文件夹内）使用 Git Bash 运行。</strong> 此时 Hexo 框架的本地搭建已经完成了。我们来运行一下看看，命令行依次输入以下命令 :</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo clean #清理hexo g #生成静态文件hexo s #启动服务hexo d #推送到代码托管服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器中打开 <a href="http://xn--localhost:4000127-kd18a6585a.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。/">http://localhost:4000 或者 127.0.0.1:4000，可以看到一个网页，说明 Hexo 博客已经成功在本地运行。</a></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308185700092.png" alt="image-20220308185700092"></p></li></ol><h5 id="3-发布到GitHub"><a href="#3-发布到GitHub" class="headerlink" title="3. 发布到GitHub"></a>3. 发布到GitHub</h5><ol><li>首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：</li></ol>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>从开源库拉取代码，安装LuckyBlog</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone https://github.com/LuckyZmj/LuckyBlog.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308190849868.png" alt="image-20220308190849868"></p><p>最后使用 <code>npm i</code> 或者 <code>npm install</code> 安装依赖环境包即可。(参考<a href="http://www.luckyzmj.cn/posts/d74d8b76.html">http://www.luckyzmj.cn/posts/d74d8b76.html</a>)</p></li><li><p>紧接着，将本地目录与 GitHub 关联起来，输入下面的命令行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen -t rsa -C "你的邮箱地址"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308190017360.png" alt="image-20220308190017360"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308190035116.png" alt="image-20220308190035116"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308190054226.png" alt="image-20220308190054226"></p></li><li><p>进入博客站点目录，用文本编辑器打开<code>_config.yml</code>，这个<code>_config.yml</code> 是博客的配置文件，在以后的博客修改，如个性化修改，博客 SEO 优化等都会使用到，修改如下图的几个地方：</p><pre class="line-numbers language-none"><code class="language-none">title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种   timezone: 时区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Hexo Configuration</span><span class="token comment">## Docs: https://hexo.io/docs/configuration.html</span><span class="token comment">## Source: https://github.com/hexojs/hexo/</span><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 一阵风<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'博客空间'</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'本科 | 应用物理 | 测试'</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token string">'一阵风 计算机 物理 测试'</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 一阵风<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># URL</span><span class="token comment">## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//yizhenfeng2016.github.io<span class="token key atrule">root</span><span class="token punctuation">:</span> /BlogHome/<span class="token comment"># permalink: :year/:month/:day/:title/</span><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink.html  <span class="token comment"># p 是自定义的前缀</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>    <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32   <span class="token comment">#算法： crc16(default) and crc32</span>    <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex     <span class="token comment">#进制： dec(default) and hex                                                </span><span class="token key atrule">permalink_defaults</span><span class="token punctuation">:</span><span class="token key atrule">pretty_urls</span><span class="token punctuation">:</span>  <span class="token key atrule">trailing_index</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Set to false to remove trailing 'index.html' from permalinks</span>  <span class="token key atrule">trailing_html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Set to false to remove trailing '.html' from permalinks</span><span class="token comment"># Directory</span><span class="token key atrule">source_dir</span><span class="token punctuation">:</span> source<span class="token key atrule">public_dir</span><span class="token punctuation">:</span> public<span class="token key atrule">tag_dir</span><span class="token punctuation">:</span> tags<span class="token key atrule">archive_dir</span><span class="token punctuation">:</span> archives<span class="token key atrule">category_dir</span><span class="token punctuation">:</span> categories<span class="token key atrule">code_dir</span><span class="token punctuation">:</span> downloads/code<span class="token key atrule">i18n_dir</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>lang<span class="token key atrule">skip_render</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">'tools/*'</span>  <span class="token punctuation">-</span> <span class="token string">'tools/**'</span>  <span class="token punctuation">-</span> <span class="token string">'GoogleHacking/*'</span>  <span class="token punctuation">-</span> <span class="token string">'GoogleHacking/**'</span>  <span class="token punctuation">-</span> <span class="token string">'Windows/*'</span>  <span class="token punctuation">-</span> <span class="token string">'Windows/**'</span>                       <span class="token comment"># Writing</span><span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.md <span class="token comment"># File name of new posts</span><span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post<span class="token key atrule">titlecase</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Transform title into titlecase</span><span class="token key atrule">external_link</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Open external links in new tab</span>  <span class="token key atrule">field</span><span class="token punctuation">:</span> site <span class="token comment"># Apply to the whole site</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">filename_case</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token key atrule">render_drafts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">relative_link</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">future</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># Home page setting</span><span class="token comment"># path: Root path for your blogs index page. (default = '')</span><span class="token comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><span class="token comment"># order_by: Posts order. (Order by date descending by default)</span><span class="token key atrule">index_generator</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">12</span> <span class="token comment">#下半部文章页面显示数</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span class="token comment"># Category &amp; Tag</span><span class="token key atrule">default_category</span><span class="token punctuation">:</span> uncategorized<span class="token key atrule">category_map</span><span class="token punctuation">:</span><span class="token key atrule">tag_map</span><span class="token punctuation">:</span><span class="token comment"># Metadata elements</span><span class="token comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><span class="token key atrule">meta_generator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># Date / Time format</span><span class="token comment">## Hexo uses Moment.js to parse and display date</span><span class="token comment">## You can customize the date format as defined in</span><span class="token comment">## http://momentjs.com/docs/#/displaying/format/</span><span class="token key atrule">date_format</span><span class="token punctuation">:</span> YYYY<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>DD<span class="token key atrule">time_format</span><span class="token punctuation">:</span> HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token comment">## updated_option supports 'mtime', 'date', 'empty'</span><span class="token key atrule">updated_option</span><span class="token punctuation">:</span> <span class="token string">'mtime'</span><span class="token comment"># Pagination</span><span class="token comment">## Set per_page to 0 to disable pagination</span><span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">6</span>   <span class="token comment"># 推荐文章以及分类标签显示数</span><span class="token key atrule">pagination_dir</span><span class="token punctuation">:</span> page<span class="token comment"># Include / Exclude file(s)</span><span class="token comment">## include:/exclude: options only apply to the 'source/' folder</span><span class="token key atrule">include</span><span class="token punctuation">:</span><span class="token key atrule">exclude</span><span class="token punctuation">:</span><span class="token key atrule">ignore</span><span class="token punctuation">:</span><span class="token comment"># Extensions</span><span class="token comment">## Plugins: https://hexo.io/plugins/</span><span class="token comment">## Themes: https://hexo.io/themes/</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> matery<span class="token comment"># Extensions</span><span class="token comment">## Plugins: http://hexo.io/plugins/</span><span class="token comment">#RSS订阅</span><span class="token key atrule">plugin</span><span class="token punctuation">:</span><span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>feed<span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>baidu<span class="token punctuation">-</span>sitemap<span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>sitemap<span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml  <span class="token key atrule">sitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml             <span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/yizhenfeng2016/BlogHome.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token comment"># baidu submit</span><span class="token key atrule">baidu_url_submit</span><span class="token punctuation">:</span>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">40</span>                                      <span class="token comment"># 提交最新的一个链接</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> yizhenfeng2016.github.io <span class="token comment"># 在百度站长平台中注册的域名</span>  <span class="token key atrule">token</span><span class="token punctuation">:</span> xxxxxxxxxxxxxxx    <span class="token comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidu_urls.txt                <span class="token comment"># 文本文档的地址， 新链接会保存在此文本文档里</span><span class="token comment"># matery搜索功能</span><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span class="token comment"># 中文链接转拼音</span><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span class="token comment"># emoji表情支持</span><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>   <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>   <span class="token key atrule">customEmojis</span><span class="token punctuation">:</span> <span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 是否开启图片懒加载</span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 是否只对文章的图片做懒加载</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress<span class="token punctuation">-</span>bar<span class="token punctuation">-</span>stripe<span class="token punctuation">-</span>loader.svg <span class="token comment"># eg ./images/loading.gif</span><span class="token comment">#压缩js、css、html等，优化加载速度</span><span class="token key atrule">all_minifier</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308190343899.png" alt="image-20220308190343899"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308190413889.png" alt="image-20220308190413889"></p></li><li><p>两个重要的配置文件</p><p>网站配置：根目录/_config.yml</p><p>主题配置：根目录/themes/matery/_config.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Hexo Configuration</span><span class="token comment">## Docs: https://hexo.io/docs/configuration.html</span><span class="token comment">## Source: https://github.com/hexojs/hexo/</span><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 一阵风<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'博客空间'</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'本科 | 应用物理 | 测试'</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token string">'一阵风 计算机 物理 测试'</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 一阵风<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># URL</span><span class="token comment">## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//yizhenfeng2016.github.io<span class="token key atrule">root</span><span class="token punctuation">:</span> /BlogHome/<span class="token comment"># permalink: :year/:month/:day/:title/</span><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink.html  <span class="token comment"># p 是自定义的前缀</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>    <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32   <span class="token comment">#算法： crc16(default) and crc32</span>    <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex     <span class="token comment">#进制： dec(default) and hex                                                </span><span class="token key atrule">permalink_defaults</span><span class="token punctuation">:</span><span class="token key atrule">pretty_urls</span><span class="token punctuation">:</span>  <span class="token key atrule">trailing_index</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Set to false to remove trailing 'index.html' from permalinks</span>  <span class="token key atrule">trailing_html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Set to false to remove trailing '.html' from permalinks</span><span class="token comment"># Directory</span><span class="token key atrule">source_dir</span><span class="token punctuation">:</span> source<span class="token key atrule">public_dir</span><span class="token punctuation">:</span> public<span class="token key atrule">tag_dir</span><span class="token punctuation">:</span> tags<span class="token key atrule">archive_dir</span><span class="token punctuation">:</span> archives<span class="token key atrule">category_dir</span><span class="token punctuation">:</span> categories<span class="token key atrule">code_dir</span><span class="token punctuation">:</span> downloads/code<span class="token key atrule">i18n_dir</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>lang<span class="token key atrule">skip_render</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">'tools/*'</span>  <span class="token punctuation">-</span> <span class="token string">'tools/**'</span>  <span class="token punctuation">-</span> <span class="token string">'GoogleHacking/*'</span>  <span class="token punctuation">-</span> <span class="token string">'GoogleHacking/**'</span>  <span class="token punctuation">-</span> <span class="token string">'Windows/*'</span>  <span class="token punctuation">-</span> <span class="token string">'Windows/**'</span>                       <span class="token comment"># Writing</span><span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.md <span class="token comment"># File name of new posts</span><span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post<span class="token key atrule">titlecase</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Transform title into titlecase</span><span class="token key atrule">external_link</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Open external links in new tab</span>  <span class="token key atrule">field</span><span class="token punctuation">:</span> site <span class="token comment"># Apply to the whole site</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">filename_case</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token key atrule">render_drafts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">relative_link</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">future</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># Home page setting</span><span class="token comment"># path: Root path for your blogs index page. (default = '')</span><span class="token comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><span class="token comment"># order_by: Posts order. (Order by date descending by default)</span><span class="token key atrule">index_generator</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">12</span> <span class="token comment">#下半部文章页面显示数</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span class="token comment"># Category &amp; Tag</span><span class="token key atrule">default_category</span><span class="token punctuation">:</span> uncategorized<span class="token key atrule">category_map</span><span class="token punctuation">:</span><span class="token key atrule">tag_map</span><span class="token punctuation">:</span><span class="token comment"># Metadata elements</span><span class="token comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><span class="token key atrule">meta_generator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># Date / Time format</span><span class="token comment">## Hexo uses Moment.js to parse and display date</span><span class="token comment">## You can customize the date format as defined in</span><span class="token comment">## http://momentjs.com/docs/#/displaying/format/</span><span class="token key atrule">date_format</span><span class="token punctuation">:</span> YYYY<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>DD<span class="token key atrule">time_format</span><span class="token punctuation">:</span> HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token comment">## updated_option supports 'mtime', 'date', 'empty'</span><span class="token key atrule">updated_option</span><span class="token punctuation">:</span> <span class="token string">'mtime'</span><span class="token comment"># Pagination</span><span class="token comment">## Set per_page to 0 to disable pagination</span><span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">6</span>   <span class="token comment"># 推荐文章以及分类标签显示数</span><span class="token key atrule">pagination_dir</span><span class="token punctuation">:</span> page<span class="token comment"># Include / Exclude file(s)</span><span class="token comment">## include:/exclude: options only apply to the 'source/' folder</span><span class="token key atrule">include</span><span class="token punctuation">:</span><span class="token key atrule">exclude</span><span class="token punctuation">:</span><span class="token key atrule">ignore</span><span class="token punctuation">:</span><span class="token comment"># Extensions</span><span class="token comment">## Plugins: https://hexo.io/plugins/</span><span class="token comment">## Themes: https://hexo.io/themes/</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> matery<span class="token comment"># Extensions</span><span class="token comment">## Plugins: http://hexo.io/plugins/</span><span class="token comment">#RSS订阅</span><span class="token key atrule">plugin</span><span class="token punctuation">:</span><span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>feed<span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>baidu<span class="token punctuation">-</span>sitemap<span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>sitemap<span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml  <span class="token key atrule">sitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml             <span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/yizhenfeng2016/BlogHome.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token comment"># baidu submit</span><span class="token key atrule">baidu_url_submit</span><span class="token punctuation">:</span>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">40</span>                                      <span class="token comment"># 提交最新的一个链接</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> yizhenfeng2016.github.io <span class="token comment"># 在百度站长平台中注册的域名</span>  <span class="token key atrule">token</span><span class="token punctuation">:</span> xxxxxxxxxxxxxxx    <span class="token comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidu_urls.txt                <span class="token comment"># 文本文档的地址， 新链接会保存在此文本文档里</span><span class="token comment"># matery搜索功能</span><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span class="token comment"># 中文链接转拼音</span><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span class="token comment"># emoji表情支持</span><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>   <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>   <span class="token key atrule">customEmojis</span><span class="token punctuation">:</span> <span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 是否开启图片懒加载</span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 是否只对文章的图片做懒加载</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress<span class="token punctuation">-</span>bar<span class="token punctuation">-</span>stripe<span class="token punctuation">-</span>loader.svg <span class="token comment"># eg ./images/loading.gif</span><span class="token comment">#压缩js、css、html等，优化加载速度</span><span class="token key atrule">all_minifier</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p>github page 使用</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308194032411.png" alt="image-20220308194032411"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308194143406.png" alt="image-20220308194143406"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308194218433.png" alt="image-20220308194218433"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308194249803.png" alt="image-20220308194249803"></p></li></ol></li></ol><h4 id="二、优化"><a href="#二、优化" class="headerlink" title="二、优化"></a>二、优化</h4><h5 id="1-压缩"><a href="#1-压缩" class="headerlink" title="1. 压缩"></a>1. 压缩</h5>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install hexo-all-minifier --save如果失败，采用下面cnpm install hexo-all-minifier --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>配置：</code></pre>   <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">all_minifier</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-首页加载视频"><a href="#2-首页加载视频" class="headerlink" title="2.首页加载视频"></a>2.首页加载视频</h5>   <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Whether to display the videos.</span><span class="token comment"># 是否在首页显示视频.</span><span class="token key atrule">video</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 精彩视频  <span class="token key atrule">url</span><span class="token punctuation">:</span> /medias/videos/demo.mp4<span class="token comment"># 必填</span>  <span class="token key atrule">pic</span><span class="token punctuation">:</span> /medias/videos/demo<span class="token punctuation">-</span>pic.png  <span class="token comment">#iframeUrl: http://player.bilibili.com/player.html?aid=669520137&amp;bvid=BV1oa4y1L7mw&amp;cid=234543483&amp;page=1 #在bilibili或者爱奇艺分享时选择iframe，然后填那个url来这里，sample:</span>  <span class="token key atrule">thumbnails</span><span class="token punctuation">:</span>  <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">400</span> <span class="token comment"># 如：400</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否循环播放</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-文章列表随机显示图片"><a href="#3-文章列表随机显示图片" class="headerlink" title="3. 文章列表随机显示图片"></a>3. 文章列表随机显示图片</h5>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># The post featured images that needs to be displayed when there is no image.# 无文章特色图片时需要显示的文章特色图片.featureImages:- /medias/featureimages/0.jpg- /medias/featureimages/1.jpg- /medias/featureimages/2.jpg- /medias/featureimages/3.jpg- /medias/featureimages/4.jpg- /medias/featureimages/5.jpg- /medias/featureimages/6.jpg- /medias/featureimages/7.jpg- /medias/featureimages/8.jpg- /medias/featureimages/9.jpg- /medias/featureimages/10.jpg- /medias/featureimages/11.jpg- /medias/featureimages/12.jpg- /medias/featureimages/13.jpg- /medias/featureimages/14.jpg- /medias/featureimages/15.jpg- /medias/featureimages/16.jpg- /medias/featureimages/17.jpg- /medias/featureimages/18.jpg- /medias/featureimages/19.jpg- /medias/featureimages/20.jpg- /medias/featureimages/21.jpg- /medias/featureimages/22.jpg- /medias/featureimages/23.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-新建文章，直接启动Typora"><a href="#4-新建文章，直接启动Typora" class="headerlink" title="4. 新建文章，直接启动Typora"></a>4. 新建文章，直接启动Typora</h5><pre><code>写新文章时，需要控制台执行 `hexo new "文章名字"`，这样就会在`_posts` 下生成一篇新文章，但需要手动打开，挺麻烦，只需要在站点根目录下新建 `scripts` 目录，然后在新建 `auto_open.js`，在文件填入一下内容：</code></pre>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span><span class="token comment">// Hexo 2.x 用户复制这段</span><span class="token comment">//hexo.on('new', function(path){</span>  <span class="token comment">//spawn('start  "markdown编辑器绝对路径.exe" ' + path);</span><span class="token comment">//});</span><span class="token comment">// Hexo 3 用户复制这段</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start  "D:\Program Files\Typora\Typora.exe" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308194532077.png" alt="image-20220308194532077"></p><h5 id="5-编写脚本bat，直接创建文章，并发布"><a href="#5-编写脚本bat，直接创建文章，并发布" class="headerlink" title="5. 编写脚本bat，直接创建文章，并发布"></a>5. 编写脚本bat，直接创建文章，并发布</h5><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">1. Hexo创建文章.bat（默认文章标题）d:cd D:\BlogHome\blogsset name=%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%%time:~6,2%hexo new %name%pause或者（输入文章标题）d:cd D:\BlogHome\blogsset /p name=输入文章标题:hexo new %name%pause2.Hexo发布文章.batd:cd D:\BlogHome\blogs"D:\Program Files\Git\git-bash.exe" -c "hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; exec /bin/bash"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220308194834881.png" alt="image-20220308194834881"></p>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞扫描工具--AppScan和Nessus</title>
      <link href="/BlogHome/posts/e3c6b0aa.html"/>
      <url>/BlogHome/posts/e3c6b0aa.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="漏洞扫描工具–AppScan和Nessus"><a href="#漏洞扫描工具–AppScan和Nessus" class="headerlink" title="漏洞扫描工具–AppScan和Nessus"></a>漏洞扫描工具–AppScan和Nessus</h3><h5 id="1-AppScan安装"><a href="#1-AppScan安装" class="headerlink" title="1.AppScan安装"></a>1.AppScan安装</h5><p>参考：<a href="http://luckyzmj.cn/posts/6c5da8c0.html">http://luckyzmj.cn/posts/6c5da8c0.html</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">下载地址：https://pan.baidu.com/s/1LhVlrLawEC-_nsCSkY5GVQ提取码：g99w<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>AppScan 推出了新的标准技术预览代码版本，启动 <code>AppScanGui.exe</code> 即可</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305134150615.png" alt="image-20220305134150615"></p><h5 id="2-Nessus安装（centos7）"><a href="#2-Nessus安装（centos7）" class="headerlink" title="2.Nessus安装（centos7）"></a>2.Nessus安装（centos7）</h5><p>参考：<a href="http://luckyzmj.cn/posts/477c90d0.html">http://luckyzmj.cn/posts/477c90d0.html</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.下载xxx.rpm https://www.tenable.com/downloads/nessus2.上传到/root3.安装，自动安装到/opt目录 rpm -ivh xxx.rpm4.systemctl start nessusd.service5.安装firewalld  yum install -y firewalld firewall-config  配置  firewall-cmd --zone=public --add-port=8834/tcp --permanent  firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装完成后进行系统设置，打开访问网址 <code>https://127.0.0.1:8834</code>，初始化扫描器。</p><p>根据提示步骤，选择 <code>Managed Scanner</code></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305135303641.png" alt="image-20220305135303641"></p><p>再选择 <code>Tenable.sc</code></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305135317574.png" alt="image-20220305135317574"></p><p>最后，点击继续，创建账号密码即可登录</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305135351233.png" alt="image-20220305135351233"></p><h6 id="更新漏洞库"><a href="#更新漏洞库" class="headerlink" title="更新漏洞库"></a>更新漏洞库</h6><ul><li>注册地址：<a href="https://zh-cn.tenable.com/products/nessus/nessus-essentials">https://zh-cn.tenable.com/products/nessus/nessus-essentials</a></li></ul><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305135451298.png" alt="image-20220305135451298"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.打开安装目录 /opt/nessus/sbin ./nessuscli fetch --challenge2.下载离线插件 打开网址 https://plugins.nessus.org/v2/offline.php，填入上两步获取的内容，即可得一个离线的插件包，选择合适的版本进行下载，拖到服务器上面安装即可。命令：./nessuscli update all-2.0.tar.gz。另外需要将网页上的license保存下来，稍后有用。提示：如果执行命令的时候出现了类似说你的软件是从哪copy来的吧，意思就是你的软件没有激活。输入./nessuscli fetch --register-offline nessus.license，就可以顺利执行命令了。注意：更新完漏洞库后，记住version版本号，如上述中的version版本号为 202203041934，之后破解时会用到这个。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305135828178.png" alt="image-20220305135828178"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305135847587.png" alt="image-20220305135847587"></p><h6 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.重启服务（systemctl restart nessusd）后，打开nessus页面，确认插件编译完成后，出现登录框，才能找到网上说的plugin_feed_info.inc 这两个文件，否则是没有生成的 find ./ -name plugin* 2.打开plugin_feed_info.incPLUGIN_SET = "202203041934";PLUGIN_FEED = "ProfessionalFeed (Direct)";PLUGIN_FEED_TRANSPORT = "Tenable Network Security Lightning";3.重启服务（systemctl restart nessusd）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305140017307.png" alt="image-20220305140017307"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305140048880.png" alt="image-20220305140048880"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305140538985.png" alt="image-20220305140538985"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305140758953.png" alt="image-20220305140758953"></p><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305141347518.png" alt="image-20220305141347518"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305141403005.png" alt="image-20220305141403005"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305141417616.png" alt="image-20220305141417616"></p><p>如果你在破解完后使用工具扫描网站，发现每个目标扫描时间都是几秒钟就立刻结束，扫描不到任何漏洞。那么很有可能是你在破解重启Nessus服务环节的时候，软件自动把Nessus的漏洞库插件全清除了，也就是在安装目录下（<code>C:\ProgramData\Tenable\Nessus\nessus\plugins\</code>）没有任何漏洞插件文件了。</p><p>如果真碰到这种情况，那就按照之前的步骤重新更新下漏洞库，然后再破解一遍。或者是在更新完漏洞库后，将<code>nessus\plugins\</code>目录拷贝一份，等破解完重启服务，重进Nessus加载完后退出，再将事先拷贝的文件复制回去。</p>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> AppScan </tag>
            
            <tag> Nessus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装后修改网络</title>
      <link href="/BlogHome/posts/d8b9b974.html"/>
      <url>/BlogHome/posts/d8b9b974.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Centos7-安装后修改网络"><a href="#Centos7-安装后修改网络" class="headerlink" title="Centos7 安装后修改网络"></a>Centos7 安装后修改网络</h3><pre class="line-numbers language-she1l" data-language="she1l"><code class="language-she1l">1.配置 /etc/sysconfig/network-scripts/ifcfg-ensxxTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=f40e4c3f-b0b0-4729-8170-ef8ee6ad7beeDEVICE=ens33ONBOOT=yesIPADDR=192.168.242.37GATEWAY=192.168.242.2NETMASK=255.255.255.0DNS1=192.168.242.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220305121453100.png" alt="image-20220305121453100"></p>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直接用命令启动docker的镜像</title>
      <link href="/BlogHome/posts/77749a8a.html"/>
      <url>/BlogHome/posts/77749a8a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="直接用命令启动docker的镜像"><a href="#直接用命令启动docker的镜像" class="headerlink" title="直接用命令启动docker的镜像"></a>直接用命令启动docker的镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -itd --add-host dev.db.java110.com:192.168.242.33 --add-host dev.redis.java110.com:192.168.242.33 --add-host dev.java110.com:192.168.242.33 -e MAX_MEM="-Xmx256m" -e MIN_MEM="-Xms256m" -e mysqlpwd="hc12345678" -e ACTIVE="zihao" -e redispwd="hc12345678" -p 1199:1199 --name myjob myjob:V20220224--name myjob //镜像名--add-host dev.db.java110.com:192.168.242.33 //在启动容器时，向/etc/hosts文件添加一个host:ip的映射-e MIN_MEM="-Xms256m" //环境变量-p 1199:1199 //端口映射-v /home/data/mysql:/var/lib/mysql //磁盘映射<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220226203218121.png" alt="image-20220226203138161"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220226203138161.png" alt="image-20220226203218121"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220226203252273.png" alt="image-20220226203231550"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220226203231550.png" alt="image-20220226203252273"></p><p>相当于：dockers-compose.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">service-oa</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>qingdao.aliyuncs.com/homecommunity/service<span class="token punctuation">-</span>oa<span class="token punctuation">:</span>V20220105180358        <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token key atrule">extra_hosts</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> dev.java110.com<span class="token punctuation">:</span>192.168.242.33            <span class="token punctuation">-</span> dev.redis.java110.com<span class="token punctuation">:</span>192.168.242.33            <span class="token punctuation">-</span> dev.db.java110.com<span class="token punctuation">:</span>192.168.242.33        <span class="token key atrule">environment</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> MAX_MEM<span class="token punctuation">:</span><span class="token punctuation">-</span>Xmx64m            <span class="token punctuation">-</span> MIN_MEM<span class="token punctuation">:</span><span class="token punctuation">-</span>Xms64m            <span class="token punctuation">-</span> mysqlpwd<span class="token punctuation">:</span>hc12345678            <span class="token punctuation">-</span> ACTIVE<span class="token punctuation">:</span>zihao            <span class="token punctuation">-</span> redispwd<span class="token punctuation">:</span>hc12345678<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试知识点之操作系统考察</title>
      <link href="/BlogHome/posts/68a5cde4.html"/>
      <url>/BlogHome/posts/68a5cde4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="测试知识点之操作系统考察"><a href="#测试知识点之操作系统考察" class="headerlink" title="测试知识点之操作系统考察"></a>测试知识点之操作系统考察</h3><ol><li>补码，最高位为0，表示正数，最高位为1，表示负数；例如8位二进制数字表示范围为-128<del>127，0000 0000 ~0111 1111表示0</del>127，1000 0000<del>1111 1111表示-128</del>-1，1000 0000的补码是原码取反+1，1000 0000取反0111 1111为127，127+1为128，表示-128</li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 补码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx部署Vue项目</title>
      <link href="/BlogHome/posts/42b247b3.html"/>
      <url>/BlogHome/posts/42b247b3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Nginx部署Vue项目"><a href="#Nginx部署Vue项目" class="headerlink" title="Nginx部署Vue项目"></a>Nginx部署Vue项目</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.Vue项目打包# 打包正式环境npm run build:prod# 打包预发布环境npm run build:stage2.将打包后的dist文件夹上传至服务器# 远程上传 或 通过ftps工具上传本次上传项目路径为 /usr/local/webapp/3.配置Nginx的conf文件vim /etc/nginx/nginx.conf#在http{}修改如下server { listen 80; server_name ip; #服务器ip或者域名 # 注意设定 root路径是有dist的 location / {   root /usr/local/webapp/dist;   index /index.html; } #跨域 ip和port自行替换 location /adminApi {   proxy_pass http://ip:port; }}4.注意Nginx的配置，例如添加header配置5.使配置生效nginx -s reloadnginx -s stopnginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装HC开源物业系统版本（前后端分离）</title>
      <link href="/BlogHome/posts/d4a04eff.html"/>
      <url>/BlogHome/posts/d4a04eff.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装HC开源物业系统版本（前后端分离）"><a href="#安装HC开源物业系统版本（前后端分离）" class="headerlink" title="安装HC开源物业系统版本（前后端分离）"></a>安装HC开源物业系统版本（前后端分离）</h3><p>1.日志出现  is not functionally dependent on columns in GROUP BY clause，</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">原因：/etc/my.conf配置出错sql_mode = ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION修改成：sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.日志出现 The last packet sent successfully to the server was 0 milliseconds ago……</p><h1 id="Caused-by-javax-net-ssl-SSLHandshakeException-No-appropriate-protocol-protocol-is-disabled-or-ciph"><a href="#Caused-by-javax-net-ssl-SSLHandshakeException-No-appropriate-protocol-protocol-is-disabled-or-ciph" class="headerlink" title="Caused by:javax.net.ssl.SSLHandshakeException: No appropriate protocol (protocol is disabled or ciph"></a><a href="https://www.cnblogs.com/renxiaozhao/p/15639342.html">Caused by:javax.net.ssl.SSLHandshakeException: No appropriate protocol (protocol is disabled or ciph</a></h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.找到java安装目录[hadoop@192 /]$ which java/bin/java[hadoop@192 /]$ ls -lrt /bin/javalrwxrwxrwx. 1 root root 22 4月  17 06:25 /bin/java -&gt; /etc/alternatives/java[hadoop@192 /]$ ls -lrt /etc/alternatives/javalrwxrwxrwx. 1 root root 72 4月  17 06:25 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64/jre/bin/java[hadoop@192 /]$2.注释掉SSL3配置文件($JAVA_HOME/jre/lib/security/java.security)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220227231550692.png" alt="image-20220227231550692"></p><p>3.mysql远程授权</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">create user 'TT'@'%' identified by 'hc12345678';create user 'hc_community'@'%' identified by 'hc12345678';flush privileges;grant all privileges on `tt`.* to 'TT'@'%';grant all privileges on `hc_community`.* to 'hc_community'@'%';flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.日志出现 Can’t write; duplicate key in table ‘act_ge_bytearray’</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.配置 etc/my.conflower_case_table_names=1  //忽略大小写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.出现 mysql 1049 -unknown database</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">原因：设置了lower_case_table_names=1  //忽略大小写，而建表或者建数据库时用了大写解决办法：要先全部转换成小写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.数据库mysql时区设置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--查看数据库时区设置mysql&gt; show variables like "%time_zone%";+------------------+--------+| Variable_name    | Value  |+------------------+--------+| system_time_zone | UTC    || time_zone        | SYSTEM |+------------------+--------+1.配置 /etc/my.confdefault-time-zone = '+08:00' <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.设置hosts</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">然后修改/etc/hosts文件vi /etc/hosts打开之后的内容是：127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6然后你在里面加一行：192.168.0.157 dev.api.java110.com192.168.0.157 dev.java110.com192.168.0.157 dev.redis.java110.com192.168.0.157 dev.db.java110.com重启网络:systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.redis 远程连接不上</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.配置  redis.confbind 127.0.0.1 改成bind 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>9.redis设置密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.配置  redis.confrequirepass hc12345678<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开源系统篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 物业 </tag>
            
            <tag> HC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装redis</title>
      <link href="/BlogHome/posts/127bace5.html"/>
      <url>/BlogHome/posts/127bace5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Centos7-安装redis"><a href="#Centos7-安装redis" class="headerlink" title="Centos7 安装redis"></a>Centos7 安装redis</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.安装# cd /opt# wget http://download.redis.io/releases/redis-4.0.14.tar.gz# tar xzf redis-4.0.14.tar.gz# cd redis-4.0.14# make -j4 &amp;&amp; make install# ll /usr/local/bin/redis*-rwxr-xr-x. 1 root root 2452112 May  2 21:40 /usr/local/bin/redis-benchmark-rwxr-xr-x. 1 root root 5777688 May  2 21:40 /usr/local/bin/redis-check-aof-rwxr-xr-x. 1 root root 5777688 May  2 21:40 /usr/local/bin/redis-check-rdb-rwxr-xr-x. 1 root root 2618136 May  2 21:40 /usr/local/bin/redis-clilrwxrwxrwx. 1 root root      12 May  2 21:40 /usr/local/bin/redis-sentinel -&gt; redis-server-rwxr-xr-x. 1 root root 5777688 May  2 21:40 /usr/local/bin/redis-server2.添加用户和目录# useradd -r -s /sbin/nologin redis# mkdir -p /data/redis# chown -R redis:redis /data/redis# mkdir -p /etc/redis# cp redis.conf /etc/redis/3.修改redis.conf# vim /etc/redis/redis.conf# If you run Redis from upstart or systemd, Redis can interact with your# supervision tree. Options:#   supervised no      - no supervision interaction#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET#   supervised auto    - detect upstart or systemd method based on#                        UPSTART_JOB or NOTIFY_SOCKET environment variables# Note: these supervision methods only signal "process is ready."#       They do not enable continuous liveness pings back to your supervisor.supervised systemd# The working directory.## The DB will be written inside this directory, with the filename specified# above using the 'dbfilename' configuration directive.## The Append Only File will also be created inside this directory.## Note that you must specify a directory here, not a file name.dir /data/redis# By default, if no "bind" configuration directive is specified, Redis listens# for connections from all the network interfaces available on the server.# It is possible to listen to just one or multiple selected interfaces using# the "bind" configuration directive, followed by one or more IP addresses.## Examples:## bind 192.168.1.100 10.0.0.1# bind 127.0.0.1 ::1## ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the# internet, binding to all the interfaces is dangerous and will expose the# instance to everybody on the internet. So by default we uncomment the# following bind directive, that will force Redis to listen only into# the IPv4 lookback interface address (this means Redis will be able to# accept connections only from clients running into the same computer it# is running).## IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES# JUST COMMENT THE FOLLOWING LINE.# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~bind 127.0.0.1 # 允许远程连接，修改成 0.0.0.0.# Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other# commands.  This might be useful in environments in which you do not trust# others with access to the host running redis-server.## This should stay commented out for backward compatibility and because most# people do not need auth (e.g. they run their own servers).## Warning: since Redis is pretty fast an outside user can try up to# 150k passwords per second against a good box. This means that you should# use a very strong password otherwise it will be very easy to break.## requirepass password            # Optional.4.配置systemd# vim /usr/lib/systemd/system/redis.service[Unit]Description=Redis ServerDocumentation=https://redis.io/After=network.target[Service]Type=simpleUser=redisGroup=redisExecStart=/usr/local/bin/redis-server /etc/redis/redis.confExecStop=/usr/local/bin/redis-cli shutdown[Install]WantedBy=multi-user.target5.启动服务器# systemctl daemon-reload# systemctl start redis# systemctl enable redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禅道开源版安装（包括mysql安装--使用tar.gz）</title>
      <link href="/BlogHome/posts/ee7aa2f7.html"/>
      <url>/BlogHome/posts/ee7aa2f7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="禅道开源版安装"><a href="#禅道开源版安装" class="headerlink" title="禅道开源版安装"></a>禅道开源版安装</h3><ol><li><p>企业版试用半年：</p><p>下载：<a href="https://www.zentao.net/download/zentaopms16.4-80496.html">禅道16.4版本发布，支持导入Jira数据和SonarQube项目管理 - 禅道下载 - 禅道开源项目管理软件 (zentao.net)</a></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220225151009035.png" alt="image-20220225151009035"></p><p><a href="https://www.zentao.net/book/zentaopmshelp/40.html">选择适合您的安装方法 - 禅道开源版使用帮助 - 禅道开源项目管理软件 (zentao.net)</a></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220225150824523.png" alt="image-20220225150824523"></p></li><li><p>开源版安装：参考<a href="https://www.jianshu.com/p/7438878f378a">利用源码方式在centos7安装开源版禅道 - 简书 (jianshu.com)</a></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220225151124005.png" alt="image-20220225151124005"></p><ul><li><p>​    rpm安装PHP7</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpmyum install php70wyum install php70w-pdoyum install php70w-pdo_mysqlyum install php70w-jsonyum install php70w-filteryum install php70w-opensslyum install php70w-mbstringyum install php70w-zlibyum install php70w-curlyum install php70w-gdyum install php70w-iconv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装Apache</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、检查是否安装过apacherpm -qa | grep httpd若没有安装则继续安装：2、安装apacheyum install httpd-devel.x86_643、启动apache服务systemctl restart httpd.service注意事项：（1）这里若是启动失败，注意查看防火墙是否关闭，若没关闭，执行下列语句firewall-cmd --permanent --zone=public --add-service=httpfirewall-cmd --permanent --zone=public --add-service=httpsfirewall-cmd --reload（2）若提示端口被占用，杀掉占用端口的进程或者是修改apache配置文件vi /etc/httpd/conf/httpd.confServerName 192.168.52.131:8989Listen 8989当然这里不一定非要设置为8989端口，也可以设置其他的没被占用的端口。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><ul><li><p>安装mysql5.7（卸载 mariadb(rpm -qa|grep mariadb)前，请将/usr/lib64/mysql/libmysqlclient.so.18复制到某个目录，卸载后重新复制回去，这个是用来动态加载pdo_mysql.so，如果没有这个文件会报加载错误，可以通过php -m查看php插件）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.下载：http://uni.mirrors.163.com/mysql/Downloads/MySQL-5.7/ mysql-5.7.36-el7-x86_64.tar.gz2.创建安装账户  useradd -s /bin/false -d /usr/local/mysql  mysql  id mysql3.安装过程[root@GeekDevOps ~]# tar -xvzf mysql-5.7.36-el7-x86_64.tar.gz -C /usr/local/mysql/[root@GeekDevOps mysql]# cd /usr/local/mysql/mysql-5.7.36-el7-x86_64/[root@GeekDevOps mysql-5.7.36-el7-x86_64]# mv * ../[root@GeekDevOps mysql-5.7.36-el7-x86_64]# cd ..[root@GeekDevOps mysql]# rmdir mysql-5.7.36-el7-x86_64/[root@GeekDevOps mysql]# mkdir data[root@GeekDevOps mysql]# chown -R mysql.mysql ../mysql[root@GeekDevOps mysql]# cd bin[root@GeekDevOps bin]# ./mysqld --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --initialize[root@GeekDevOps bin]# tail -100f ../data/error.log 2018-03-14T06:32:34.966407Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2018-03-14T06:32:36.208273Z 0 [Warning] InnoDB: New log files created, LSN=457902018-03-14T06:32:36.367294Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.2018-03-14T06:32:36.522777Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 7c405e3f-2751-11e8-8be8-000c29fb0102.2018-03-14T06:32:36.525594Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.2018-03-14T06:32:36.526540Z 1 [Note] A temporary password is generated for root@localhost: 7Eu;dsRqkY.3[root@GeekDevOps bin]# cp ../support-files/mysql.server /etc/init.d/mysqld4.配置过程（如果报没有/etc/my.cnf.d目录，就创建）[root@GeekDevOps ~]# vi /etc/my.cnf[mysqld]port = 3306basedir = /usr/local/mysqldatadir=/usr/local/mysql/datasocket=/tmp/mysql.sockpid-file=/usr/local/mysql/data/mysql.pidlog-error=/usr/local/mysql/data/error.logcharacter_set_server=utf8user=mysqlmax_connections=1500symbolic-links=0!includedir /etc/my.cnf.d5.启动服务登录（报The server quit without updating PID file....,给目录授权chown -R mysql.mysql /usr/local/mysql/data;chmod -R 755 /usr/local/mysql/data ）添加软连接[root@GeekDevOps ~]# ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql [root@GeekDevOps ~]# service mysqld start[root@GeekDevOps ~]# mysql -u root -p[root@GeekDevOps ~]# 输入初始化密码&gt;mysql: set password=password('123456');6.设置开机自启//将服务文件拷贝到init.d下，并重命名为mysqldcp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld//赋予可执行权限chmod +x /etc/init.d/mysqld//添加服务chkconfig --add mysqld//显示服务列表chkconfig --list7.设置允许远程连接//登录mysql -u root -p//输入密码use mysql;select host from user where user='root';update user set host = '%' where user ='root';flush privileges;//使配置立即生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>安装禅道</p><pre class="line-numbers language-none"><code class="language-none">1、从禅道官网（https://www.zentao.net/）下载开源版文件。2、解压得到zentaopms目录到webserver对应的目录，如apache的 /var/www/html/ 目录下。3、通过浏览器访问http://ip:端口/zentaopms/www/index.php（如我的机器为http://1932.168.242。35:80/zentaopms/www/index.php），系统会自动转入安装程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220226155921513.png" alt="image-20220226155921513"></p><p>问题1：用php -m 查看php安装的插件（一般不用修改php.ini），如果加载pdo_mysql.so有误，报libmysqlclient.so.18: cannot open shared object file: ….</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">find / -name libmysqlclient.so.18 //如果没有找到，是不是卸载mariadb前没有备份如果有，添加软连接到/usr/lib;/usr/lib64ln -s xxxx/libmysqlclient.so.18 /usr/lib/libmysqlclient.so.18ln -s xxxx/libmysqlclient.so.18 /usr/lib64/libmysqlclient.so.18php -m   //查看是否有pdo_mysql.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题2：权限问题，要给全部权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chmod 777 -R /var/www/html/zentaopms/temp/chmod 777 -R /var/www/html/zentaopms/www/data/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入数据库密码</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220226195501753.png" alt="image-20220226195501753"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220226195532112.png" alt="image-20220226195532112"></p><p>由于没有my.php文件，需要先创建文件，然后将上面的配置复制过去</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220226195844852.png" alt="image-20220226195750924"></p></li></ul><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220226195750924.png" alt="image-20220226195811098"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220226195811098.png" alt="image-20220226195844852"></p><p>选择登录禅道管理系统</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220226195922114.png" alt="image-20220226195922114"></p>]]></content>
      
      
      <categories>
          
          <category> 开源系统篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 禅道 </tag>
            
            <tag> mysql </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 防火墙操作及开放端口</title>
      <link href="/BlogHome/posts/1db93dbb.html"/>
      <url>/BlogHome/posts/1db93dbb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="centos7-防火墙操作及开放端口"><a href="#centos7-防火墙操作及开放端口" class="headerlink" title="centos7 防火墙操作及开放端口"></a>centos7 防火墙操作及开放端口</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.查看已开放的端口firewall-cmd --list-ports2.开放单个端口(开放后需要要重启防火墙才生效)firewall-cmd --zone=public --add-port=8080/tcp --permanent3.开放多个端口(开放后需要要重启防火墙才生效)firewall-cmd --zone=public --add-port=20000-29999/tcp --permanent(--permanent  为永久生效，不加为单次有效(重启失效))4.关闭端口(关闭后需要要重启防火墙才生效)firewall-cmd --zone=public --remove-port=8080/tcp --permanent5.查看端口是否打开firewall-cmd --zone= public --query-port=80/tcp6.查看防火墙状态(两种方式)firewall-cmd --statesystemctl status firewalld7.开启防火墙systemctl start firewalld8.重启防火墙 (两种方式)firewall-cmd --reloadsystemctl restart firewalld9.设置开机启动防火墙systemctl enable firewalld10.查看防火墙设置开机自启是否成功systemctl is-enabled firewalld;echo $?11.禁止防火墙开机启动systemctl disable firewalld12.停止防火墙systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> Firewall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>top和jstack查看java进程日志（包括线程）</title>
      <link href="/BlogHome/posts/d97048d6.html"/>
      <url>/BlogHome/posts/d97048d6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="top和jstack查看java进程日志（包括线程）"><a href="#top和jstack查看java进程日志（包括线程）" class="headerlink" title="top和jstack查看java进程日志（包括线程）"></a>top和jstack查看java进程日志（包括线程）</h3><ol><li><p>查看Java的pid</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ps -ef|grep java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224105331299.png" alt="image-20220224105331299"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">top<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224105634825.png" alt="image-20220224105416613"></p><p>shift+P按cpu排序</p></li><li><p>如果java是在docker中启动，需要进入docker</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224105416613.png" alt="image-20220224105634825"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it xxx /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224110007652.png" alt="image-20220224105915061"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">top<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224110337769.png" alt="image-20220224110007652"></p></li><li><p>进入进程查看哪个线程占用最高</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">top -Hp pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224110142365.png" alt="image-20220224110142365"></p><p>例如线程16占用最高，转换成16进制为0x10：<a href="https://tool.oschina.net/hexconvert">在线进制转换 (oschina.net)</a></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224110733289.png" alt="image-20220224110337769"></p></li><li><p>输出java进程的日志，并查找0x10</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jstack pid |grep '0x10' -A 10 //查找含有0x10的行，并输出后10行jstack pid |grep '0x10' -C 10 //查找含有0x10的行，并输出前后10行jstack pid &gt;test.log //将日志写进test.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224105915061.png" alt="image-20220224110733289"></p></li><li><p>将docker 日志复制到主机上</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pwd //查看当前目录docker cp xxx(容器id):/root/test.log /root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224111127165.png" alt="image-20220224111127165"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224111613432.png" alt="image-20220224111613432"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top </tag>
            
            <tag> jstack </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看java命令之jps</title>
      <link href="/BlogHome/posts/8266feff.html"/>
      <url>/BlogHome/posts/8266feff.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="查看java命令之jps"><a href="#查看java命令之jps" class="headerlink" title="查看java命令之jps"></a>查看java命令之jps</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jps -ml //查看当前机器上运行的java进程（包名 + main method的参数）jps -mlv 查看当前机器上运行的java进程(包名 + main method的参数 + JVM参数)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224112611391.png" alt="image-20220224112611391"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224112636028.png" alt="image-20220224112636028"></p>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> jps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看java进程之jmap</title>
      <link href="/BlogHome/posts/45a4cf73.html"/>
      <url>/BlogHome/posts/45a4cf73.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="查看java进程之jmap"><a href="#查看java进程之jmap" class="headerlink" title="查看java进程之jmap"></a>查看java进程之jmap</h3><ol><li><p>通过jmap命名查看堆中对象 jmap -histo:live 7869 | head -20 定位前20个</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jmap -histo:live pid |head -20 //查看堆中对象,定位前20个jmap -histo [pid]  //查看JVM堆中对象详细占用情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224115757587.png" alt="image-20220224115127495"></p></li><li><p>通过jmap -dump导出内存文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jmap -dump:format=b,file=文件名  pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220224115127495.png" alt="image-20220224115757587"></p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> jmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置Java -jar 连接工具jvisualvm.exe</title>
      <link href="/BlogHome/posts/c5d91d4.html"/>
      <url>/BlogHome/posts/c5d91d4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="配置Java-jar-连接工具jvisualvm-exe"><a href="#配置Java-jar-连接工具jvisualvm-exe" class="headerlink" title="配置Java -jar 连接工具jvisualvm.exe"></a>配置Java -jar 连接工具jvisualvm.exe</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -jar -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1199 -Dcom.sun.management.jmxremote.rmi.port=1199 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=192.168.242.33  -Dspring.profiles.active=dev -Xms1024m -Xmx1024m /root/service-job.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> jvisualvm </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>google浏览器插件Header Editor使用</title>
      <link href="/BlogHome/posts/cd28e5d7.html"/>
      <url>/BlogHome/posts/cd28e5d7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="google浏览器插件Header-Editor使用"><a href="#google浏览器插件Header-Editor使用" class="headerlink" title="google浏览器插件Header Editor使用"></a>google浏览器插件Header Editor使用</h3><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220225112837270.png" alt="image-20220225112837270"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/image-20220225113031083.png" alt="image-20220225113031083"></p>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome 插件 </tag>
            
            <tag> Header Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看centos7端口号占用情况</title>
      <link href="/BlogHome/posts/e4d527ef.html"/>
      <url>/BlogHome/posts/e4d527ef.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="查看centos7端口号占用情况"><a href="#查看centos7端口号占用情况" class="headerlink" title="查看centos7端口号占用情况"></a>查看centos7端口号占用情况</h3><p>1.安装net-tools</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.使用netstat</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">netstat -nlp|grep 80netstat -ntlp //查看当前所有tcp端口netstat -an 查看网络端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> netstat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用git命令</title>
      <link href="/BlogHome/posts/7371eea5.html"/>
      <url>/BlogHome/posts/7371eea5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用git命令"><a href="#使用git命令" class="headerlink" title="使用git命令"></a>使用git命令</h3><p>1.git clone <a href="http://xxx.git/">http://xxx.git</a>   下载全部代码，一般是第一次使用</p><p>  <strong>git clone -b</strong> **分支名仓库地址   **git clone -b v2.8.1 <a href="https://git.oschina.net/oschina/android-app.git">https://git.oschina.net/oschina/android-app.git</a></p><p>2.git pull  拉取更新</p><p>3.git status  查看当前git状态信息（查看是否有文件未提交）</p><pre class="line-numbers language-none"><code class="language-none">被追踪的（tracked）:已经加入文档库不被追踪的(untracked):没有加入文档库忽略的(ignored):忽略那些不需要管理的文件夹或文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.git reset   不加参数(mixed)：保留工作目录，并清空暂存区</p><p>5.git fetch  是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中</p><p>6.git branch  列出当前分支清单</p><p>7.git checkout -f v2.1     -f，相当于 “–force”, 强制移动指针，忽略本地变化</p>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins配置allure插件</title>
      <link href="/BlogHome/posts/49415e41.html"/>
      <url>/BlogHome/posts/49415e41.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Jenkins配置allure插件"><a href="#Jenkins配置allure插件" class="headerlink" title="Jenkins配置allure插件"></a>Jenkins配置allure插件</h3><ol><li><p>安装allure插件</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211120221.png" alt="image-20220211115504038"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211120222.png" alt="image-20220211115541789"></p></li><li><p>安装allure</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211120223.png" alt="image-20220211115624968"></p></li><li><p>Jenkins配置allure安装路径</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211120224.png" alt="image-20220211115904074"></p></li><li><p>脚本执行完后输出报告：相对路径，完整路径=工作区目录+相对路径，生成的html报告路径固定为：工作区目录+allure-report</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211120225.png" alt="image-20220211120022386"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Allure插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins从gitee拉取代码到本地构建计划</title>
      <link href="/BlogHome/posts/18291ef1.html"/>
      <url>/BlogHome/posts/18291ef1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Jenkins从gitee拉取代码到本地构建计划"><a href="#Jenkins从gitee拉取代码到本地构建计划" class="headerlink" title="Jenkins从gitee拉取代码到本地构建计划"></a>Jenkins从gitee拉取代码到本地构建计划</h3><ol><li><p>添加凭证</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211114503.png" alt="image-20220211114502423"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211114604.png" alt="image-20220211114602533"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211115338.png" alt="image-20220211114745382"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211115339.png" alt="image-20220211114803949"></p></li><li><p>在项目配置中，配置工作区目录（下载代码到这里），输入gitee地址</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211115034.png" alt="image-20220211115033379"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211114923.png" alt="image-20220211114919058"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211115210.png" alt="image-20220211115209405"></p></li><li><p>build</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211115340.png" alt="image-20220211115141597"></p></li><li><p>查看控制台日志</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211115341.png" alt="image-20220211115303859"></p></li></ol><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211115342.png" alt="image-20220211115327968"></p>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm使用git上传代码到gitee</title>
      <link href="/BlogHome/posts/a64cc551.html"/>
      <url>/BlogHome/posts/a64cc551.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Pycharm使用git上传代码到gitee"><a href="#Pycharm使用git上传代码到gitee" class="headerlink" title="Pycharm使用git上传代码到gitee"></a>Pycharm使用git上传代码到gitee</h3><ol><li><p>pycharm安装git</p><p>如果系统没有安装git，pycharm点击VCS，选择版本控制，会提示要安装git，点击install</p></li><li><p>pycharm安装gitee插件</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211111653.png" alt="image-20220211111651882"></p></li><li><p>安装完gitee插件后，在pycharm输入账号密码登录gitee</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211112041.png" alt="image-20220211112040051"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211111937.png" alt="image-20220211111935844"></p></li><li><p>设置git 用户名和邮箱地址</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211112506.png" alt="image-20220211112505485"></p><p>在windows搜索git-bash，打开cmd命令</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name "一阵风2016"git config --global user.email "1029568690@qq.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211112710.png" alt="image-20220211112709214"></p></li><li><p>将本地项目代码第一次整体上传到gitee：VCS–导入到版本控制–Share Project On Gitee</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211113417.png" alt="image-20220211113415807"></p></li></ol><ol start="6"><li><p>更新代码到gitee：先commit到本地，然后push到gitee</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211113724.png" alt="image-20220211113722744"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211113745.png" alt="image-20220211113744210"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211114117.png" alt="image-20220211114116895"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitee </tag>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jmeter测试websocket</title>
      <link href="/BlogHome/posts/cf72ddf6.html"/>
      <url>/BlogHome/posts/cf72ddf6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Jmeter测试websocket"><a href="#Jmeter测试websocket" class="headerlink" title="Jmeter测试websocket"></a>Jmeter测试websocket</h3><ol><li>参考文献：<a href="https://blog.csdn.net/smooth00/article/details/81355110">(57条消息) JMeter测试WebSocket的经验总结_smooth的博客-CSDN博客_jmeter websocket</a></li><li>配置</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jmeter </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jmeter上数据图形显示</title>
      <link href="/BlogHome/posts/24c970c0.html"/>
      <url>/BlogHome/posts/24c970c0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="jmeter上数据图形显示"><a href="#jmeter上数据图形显示" class="headerlink" title="jmeter上数据图形显示"></a>jmeter上数据图形显示</h3><ol><li><p>通过cmd命令生成logfile，然后再用cmd命令生成html</p><p>参考文档：<a href="https://blog.csdn.net/smooth00/article/details/78728060">(57条消息) Jmeter和Ant的html报告优化及Dashboard Report介绍_smooth的博客-CSDN博客_jmeter报告优化</a></p><p>在jmeter.properties或者user.properties确认如下配置项：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">jmeter.save.saveservice.data_type</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.label</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.response_code</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.response_data.on_error</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.response_message</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.successful</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.thread_name</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.time</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.subresults</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.assertions</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.latency</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.connect_time</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.bytes</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.sent_bytes</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.thread_counts</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">jmeter.save.saveservice.idle_time</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token comment"># Timestamp format - this only affects CSV output files</span><span class="token comment"># legitimate values: none, ms, or a format suitable for SimpleDateFormat</span><span class="token constant">jmeter.save.saveservice.timestamp_format</span><span class="token attr-value"><span class="token punctuation">=</span>ms</span><span class="token constant">jmeter.save.saveservice.timestamp_format</span><span class="token attr-value"><span class="token punctuation">=</span>yyyy/MM/dd HH:mm:ss.SSS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果希望在Errors报告中展示更详细数据，需要确保如下配置：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">jmeter.save.saveservice.assertion_results_failure_message</span> <span class="token attr-value"><span class="token punctuation">=</span> true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接用cmd命令生成logfile</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jmeter -n -t &lt;test JMX file&gt; -l &lt;test log file&gt; -e -o &lt;Path to output folder&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jmeter -n -t D:\apache-jmeter-5.1.1\bin\测试websocket.jmx -l testLogFile -e -o ./output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接用cmd命令将logfile生成html</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jmeter -g &lt;log file&gt; -o &lt;Path to output folder&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jmeter -g D:\apache-jmeter-5.1.1\bin\testLogFile -o ./output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128141828.png" alt="image-20220128141826808"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128141930.png" alt="image-20220128141929034"></p></li></ol><ol start="2"><li><p>jmeter（压测）+influxdb（数据库）+grafana</p><p>参考：<a href="https://blog.csdn.net/smooth00/article/details/79926294">(57条消息) 关于Jmeter长时间压测的可视化监控报告_smooth的博客-CSDN博客_jmeter 压测报告</a></p><p>influxdb包下载：<a href="http://www.mirthsoft.com/post/2019/12/25/influxdb-windows-install-download">InfluxDB Windows安装文件下载 (mirthsoft.com)</a></p><p>grafana包下载：<a href="https://mirrors.huaweicloud.com/grafana/">Index of grafana-local (huaweicloud.com)</a></p><p>（1）influxdb配置</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128142234.png" alt="image-20220128142233235"></p><p>启动influxdb，通过CMD到influxdb的目录下，直接命令 influxd -config influxdb.conf 启动</p><p>创建数据库及用户</p><p>&gt; show databases</p><p>&gt; CREATE DATABASE jmeter</p><p>&gt; use jmeter</p><p>&gt; create user “admin” with password ‘123456’ with all privileges</p><p>端口说明：<br>2003端口：Jmeter往数据库发数据的端口，服务器端也是该端口接收数据，所以如果使用云服务器ECS的话，需要开启该2003端口<br>8086端口，Grafana从数据库取数据的端口</p><p>(2) jmeter 配置（ 以上的配置，跟默认情况不一样的是，将summaryOnly设为false，useRegexpForSamplersList设为true，并配置了samplersList的正则表达试为JDBC.*，目的是可以监听所有以JDBC名称开头的Request请求）</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128143829.png" alt="image-20220128142712096"></p><p>（3）grafana配置</p><p>针对grafana，很简单，到Grafana安装目录中的bin目录下，双击grafana-server.exe启动程序</p><p>访问<a href="http://localhost:3000，用admin（密码admin）登录，开始配置：">http://localhost:3000，用admin（密码admin）登录，开始配置：</a></p><p>第一步、配置数据库，在设置–&gt;Data Sources，添加，配置以下画圈的部分就可以了，然后直接保存通过</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128143830.png" alt="image-20220128143024513"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128143831.png" alt="image-20220128143055735"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128143832.png" alt="image-20220128143116584"></p><p>第二步，在面板中添加Graph，选择Data Source为jmeter，在查询条件中，选择你要监控的指标，可以添选多个指标</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128143833.png" alt="image-20220128143338903"></p><p>​            配置好了，就能看到图了。如果看不到图，请用Jmeter多发几次请求。可以选择最右上角的监控时间段来精确化的监控指定时间段的测试数据：</p><p>​            <img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128143834.png" alt="image-20220128143518264"></p><p>​    </p></li></ol><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128143550.png" alt="image-20220128143549002"></p><p>​         <img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128143835.png" alt="image-20220128143704911"></p><p>​    <img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128143836.png" alt="image-20220128143740945"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220128143804.png" alt="image-20220128143803382"></p>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jmeter </tag>
            
            <tag> 数据展示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm中点击安装requirements.txt出错</title>
      <link href="/BlogHome/posts/547f1942.html"/>
      <url>/BlogHome/posts/547f1942.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="pycharm中点击安装requirements-txt出错"><a href="#pycharm中点击安装requirements-txt出错" class="headerlink" title="pycharm中点击安装requirements.txt出错"></a>pycharm中点击安装requirements.txt出错</h3><ol><li><p>报no-such option:–build-dir，原因是pycharm 依赖于–bulid-dir来安装包，但是在pip版本21.3.1后被移除了，办法：将pip版本降至21.2.4</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220115142125.png" alt="image-20220115142122538"></p></li><li><p>用管理员打开cmd，在venv目录下执行：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">python<span class="token punctuation">.</span>exe <span class="token operator">-</span>m pip install pip==21<span class="token punctuation">.</span>2<span class="token punctuation">.</span>4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220115142717.png" alt="image-20220115142716322"></p></li><li><p>然后在pycharm进行安装</p></li><li><p>在使用cmd命令pip install安装时出现ssl 认证报错，请确认是否使用代理，我就因为要加速github，安装了DevSidecar工具</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220115143322.png" alt="image-20220115143320511"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220115143359.png" alt="image-20220115143357358"></p></li><li><p>解决办法</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220115143450.png" alt="image-20220115143449647"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moco-runner-1.3-standalone.jar使用</title>
      <link href="/BlogHome/posts/305f1f1.html"/>
      <url>/BlogHome/posts/305f1f1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="moco-runner-1-3-standalone-jar使用"><a href="#moco-runner-1-3-standalone-jar使用" class="headerlink" title="moco-runner-1.3-standalone.jar使用"></a>moco-runner-1.3-standalone.jar使用</h3><p>使用mock构建环境适用范围：当服务器还没有完成或者是使用第三方接口，需要模拟返回数据。</p><p>该jar下载地址：<a href="https://github.com/dreamhead/moco">dreamhead/moco: Easy Setup Stub Server (github.com)</a></p><ol><li><p>http协议</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119170255.png" alt="image-20220119170254744"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119170350.png" alt="image-20220119170349155"></p><p>创建一个.json文件：必须是数组[]</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>  <span class="token property">"request"</span> <span class="token operator">:</span>    <span class="token punctuation">{</span>      <span class="token property">"method"</span> <span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>      <span class="token property">"uri"</span><span class="token operator">:</span><span class="token string">"/api"</span><span class="token punctuation">,</span>      <span class="token property">"text"</span><span class="token operator">:</span>        <span class="token punctuation">{</span>            <span class="token property">"json"</span><span class="token operator">:</span><span class="token string">"{\"foo\":\"bar\"}"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"response"</span> <span class="token operator">:</span>    <span class="token punctuation">{</span>      <span class="token property">"json"</span> <span class="token operator">:</span>           <span class="token punctuation">{</span>            <span class="token property">"foo"</span> <span class="token operator">:</span> <span class="token string">"bar"</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">java <span class="token operator">-</span>jar D:\TestTools\mock\moco<span class="token operator">-</span>runner<span class="token operator">-</span>1<span class="token punctuation">.</span>3<span class="token punctuation">.</span>0<span class="token operator">-</span>standalone<span class="token punctuation">.</span>jar http <span class="token operator">-</span>p 12306 <span class="token operator">-</span>c D:\TestTools\mock\responsedata\http\api4<span class="token punctuation">.</span>json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119170637.png" alt="image-20220119170636206"></p><p>调用： post  <a href="http://127.0.0.1:12306/api">http://127.0.0.1:12306/api</a>   {“foo”:”bar”}，则返回json数据 {“foo”:”bar”}</p><p><strong>可以直接修改.json文件，不用重启服务</strong></p></li><li><p>restful协议</p><p>创建一个.json文件：必须是数组[]</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"resource"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"targets"</span><span class="token punctuation">,</span>  <span class="token property">"get"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>      <span class="token property">"response"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"json"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"meassage"</span><span class="token operator">:</span> <span class="token string">"foo"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务，跟http一样</p><p>调用：get   <a href="http://127.0.0.1:12306/targets/1">http://127.0.0.1:12306/targets/1</a>  返回：{“code”:1,”message”:”foo”}</p></li><li><p>websocket协议 </p><p>创建一个.json文件：必须是数组[]</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"websocket"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"uri"</span><span class="token operator">:</span> <span class="token string">"/ws"</span><span class="token punctuation">,</span>        <span class="token property">"sessions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"foo"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"response"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"bar"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务，跟http一样 </p><p>可以使用在线工具测试websocket:<a href="http://www.jsons.cn/websocket/">Websocket在线测试-Websocket接口测试-Websocket模拟请求工具 (jsons.cn)</a></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119171644.png" alt="image-20220119171643424"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119171720.png" alt="image-20220119171719556"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Moco-Runner </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman使用总结</title>
      <link href="/BlogHome/posts/aac275fb.html"/>
      <url>/BlogHome/posts/aac275fb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Postman使用总结"><a href="#Postman使用总结" class="headerlink" title="Postman使用总结"></a>Postman使用总结</h3><ol><li><p>添加一个环境environments</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119162717.png" alt="image-20220119162716268"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119162752.png" alt="image-20220119162751323"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119162833.png" alt="image-20220119162831920"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119162916.png" alt="image-20220119162915602"></p></li><li><p>设置环境变量或者全局变量</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119163053.png" alt="image-20220119163052945"></p></li><li><p>在某个请求后提取响应数据</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119163220.png" alt="image-20220119163219208"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> addtoken <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>pm<span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> addtoken<span class="token punctuation">.</span>data<span class="token punctuation">.</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>pm：表示postman对象</p><p>environment：表示环境变量</p><p>globals：表示全局变量</p></li><li><p>设置某个集合的下的全局headers</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119164028.png" alt="image-20220119164027901"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119164053.png" alt="image-20220119164052656"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119164133.png"></p></li></ol><p>   检查一下集合下所有请求，是否改过这个（默认是这个，继承父亲的headers）</p><p>   <img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119164351.png" alt="image-20220119164350669"></p><ol start="5"><li><p>配置能查看请求信息</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119164950.png" alt="image-20220119164949239"></p></li><li>，如果参数和字符串类型，必须加“  ”</li><li><p>如果请求选了Raw，headers必须指定content-type:”application/json”,默认时“html/text”</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119165407.png" alt="image-20220119165406625"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220119165524.png" alt="image-20220119165523636"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划求解连续，最大问题</title>
      <link href="/BlogHome/posts/9f2ad6f3.html"/>
      <url>/BlogHome/posts/9f2ad6f3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="动态规划求解连续，最大问题"><a href="#动态规划求解连续，最大问题" class="headerlink" title="动态规划求解连续，最大问题"></a>动态规划求解连续，最大问题</h3><ol><li><p>问题：</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220118222353.png" alt="image-20220118222352668"></p></li><li><p>解法</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220118222438.png" alt="image-20220118222437120"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220118222545.png" alt="image-20220118222544432"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法边界条件处理</title>
      <link href="/BlogHome/posts/d708f7c9.html"/>
      <url>/BlogHome/posts/d708f7c9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="二分法边界条件处理"><a href="#二分法边界条件处理" class="headerlink" title="二分法边界条件处理"></a>二分法边界条件处理</h3><ol><li><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220117230329.png" alt="image-20220117230328854"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220117230352.png"></p></li><li><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220117230436.png" alt="image-20220117230435170"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220117230458.png" alt="image-20220117230457612"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220117230535.png" alt="image-20220117230534337"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome浏览器安装axure插件</title>
      <link href="/BlogHome/posts/c9548500.html"/>
      <url>/BlogHome/posts/c9548500.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="chrome浏览器安装axure插件"><a href="#chrome浏览器安装axure插件" class="headerlink" title="chrome浏览器安装axure插件"></a>chrome浏览器安装axure插件</h3><ol><li><p>下载Axure RP Extension for Chrome 0.6.3，我将它放在百度云盘供大家使用</p><p>链接：<a href="https://pan.baidu.com/s/1Job9KmrlTrsZIdCy2iVOjw">https://pan.baidu.com/s/1Job9KmrlTrsZIdCy2iVOjw</a><br>提取码：gzef</p></li><li><p>解压后找到.crx文件，打开chrome浏览器，找到”更多工具”–“扩展程序”，打开开发者模式，将.crx文件直接拖进去</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220117203137.png" alt="image-20220117203135711"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220117203456.png" alt="image-20220117203455189"></p></li><li><p>在文件夹中找到index.html，并打开</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220117203647.png" alt="image-20220117203645103"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220117203812.png" alt="image-20220117203811024"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axure </tag>
            
            <tag> Chrome 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈结构使用</title>
      <link href="/BlogHome/posts/69b4da18.html"/>
      <url>/BlogHome/posts/69b4da18.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="栈结构使用"><a href="#栈结构使用" class="headerlink" title="栈结构使用"></a>栈结构使用</h3><p>由于栈结构的特殊性，非常适合做对称匹配类的题目</p><ol><li><p>题目</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220116224543.png" alt="image-20220116224542143"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment">#由于栈结构的特殊性，非常适合做对称匹配类的题目</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> item <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> item <span class="token operator">==</span> <span class="token string">'{'</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'}'</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token keyword">not</span> stack <span class="token keyword">or</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> item<span class="token punctuation">:</span> <span class="token comment">#如果stack为空（说明没有左边括号），或者栈顶元素不等于当前元素</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#栈顶元素等于当前元素，弹出</span>        <span class="token keyword">if</span> stack<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口自动化框架</title>
      <link href="/BlogHome/posts/8b3342ab.html"/>
      <url>/BlogHome/posts/8b3342ab.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="接口自动化框架"><a href="#接口自动化框架" class="headerlink" title="接口自动化框架"></a>接口自动化框架</h3><p>整体构架图：</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220115205258.png" alt="image-20220115205257213"></p><p>​    <img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220115205415.png" alt="image-20220115205414664"></p><p>​    <img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220115205518.png" alt="image-20220115205516747"></p><ol><li><p>excel中用例设计</p><pre class="line-numbers language-none"><code class="language-none">_, #编号case_title, #用例标题header, #请求头path, #接口地址method, #请求方式parametric_key, #入参关键字file_obj, #上传文件data, #请求数据extra, #提取参数sql,#后置sqlexpect, #预期结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220115205025.png" alt="image-20220115205023987"></p></li><li><p>程序执行过程设计</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220115215051.png" alt="image-20220115215050093"></p></li><li><p>主要代码</p><ol><li><p>run.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'report/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'report/'</span><span class="token punctuation">)</span> <span class="token comment">#移除整个目录</span>    <span class="token comment"># 解决 issues 句柄无效</span>    logger<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#add之前，清空logger</span>    logger<span class="token punctuation">.</span>add<span class="token punctuation">(</span>file_path<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> enqueue<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment">#参数1：文件路径；参数2：使用异步写入；参数3：编码</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"-----***** Starting *****-----"</span><span class="token punctuation">)</span>    pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span>        args<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token string">'test/test_api.py'</span><span class="token punctuation">,</span>            <span class="token string-interpolation"><span class="token string">f'--alluredir=</span><span class="token interpolation"><span class="token punctuation">{</span>file_path<span class="token punctuation">[</span><span class="token string">"report"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">/data'</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">#设置pytest的执行参数，执行test/test_api.py文件，并生成allure格式的报告。main()括号内可传入执行参数和插件参数，通过[]进行分割，[]内的多个参数通过‘逗号,’进行分割</span>    <span class="token comment"># 本地生成报告</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>        <span class="token string-interpolation"><span class="token string">f'allure generate </span><span class="token interpolation"><span class="token punctuation">{</span>file_path<span class="token punctuation">[</span><span class="token string">"report"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">/data -o </span><span class="token interpolation"><span class="token punctuation">{</span>file_path<span class="token punctuation">[</span><span class="token string">"report"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">/html --clean'</span></span><span class="token punctuation">)</span>  <span class="token comment">#allure generate [xml_report_path] -o [html_report_path]//[html_report_path]根据自己需要定义文件夹，作者定义为：/report/html</span>    logger<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'-----***** 报告已生成 *****-----'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><ol start="2"><li><p>test_api.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_main</span><span class="token punctuation">(</span>cases<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># cases对应conftest.py中的cases方法</span>    <span class="token comment"># 发送请求</span>    response<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> sql <span class="token operator">=</span> client<span class="token punctuation">.</span>action<span class="token punctuation">(</span>cases<span class="token punctuation">)</span>    <span class="token comment"># 断言操作</span>    DataProcess<span class="token punctuation">.</span>assert_result<span class="token punctuation">(</span>response<span class="token punctuation">,</span> expect<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>conftest.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>params<span class="token operator">=</span>ReadFile<span class="token punctuation">.</span>read_testcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#params：一个可选的参数列表，它将导致多个参数调用fixture功能和所有测试使用它</span><span class="token keyword">def</span> <span class="token function">cases</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#执行每个值的列表，可以通过 request.param</span>    <span class="token triple-quoted-string string">"""用例数据，测试方法参数入参该方法名 cases即可，实现同样的参数化    目前来看相较于@pytest.mark.parametrize 更简洁。    """</span>    <span class="token keyword">return</span> request<span class="token punctuation">.</span>param<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>read_file.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">read_testcase</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        读取excel格式的测试用例,返回一个生成器对象        :return 生成器        """</span>        book <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span>cls<span class="token punctuation">.</span>read_config<span class="token punctuation">(</span><span class="token string">"$.file_path.test_case"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 读取第一个sheet页</span>        table <span class="token operator">=</span> book<span class="token punctuation">.</span>sheet_by_index<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> norw <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>nrows<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 每行第4列 是否运行</span>            <span class="token keyword">if</span> table<span class="token punctuation">.</span>cell_value<span class="token punctuation">(</span>norw<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"否"</span><span class="token punctuation">:</span>  <span class="token comment"># 每行第4列等于否将不读取内容</span>                value <span class="token operator">=</span> table<span class="token punctuation">.</span>row_values<span class="token punctuation">(</span>norw<span class="token punctuation">)</span>                value<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">#将excel第五列数据去除</span>                <span class="token keyword">yield</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ReadFile</span><span class="token punctuation">:</span>    config_dict <span class="token operator">=</span> <span class="token boolean">None</span>    config_path <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">str</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">/config/config.yaml"</span></span>  <span class="token comment">#配置文件路径：项目/config/config.yaml</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">get_config_dict</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""读取配置文件，并且转换成字典        return cls.config_dict        """</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>config_dict <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token comment"># 指定编码格式解决，win下跑代码抛出错误</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>config_path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>                cls<span class="token punctuation">.</span>config_dict <span class="token operator">=</span> yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Loader<span class="token operator">=</span>yaml<span class="token punctuation">.</span>FullLoader<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>config_dict    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">read_config</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> expr<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""默认读取config目录下的config.yaml配置文件，根据传递的expr jsonpath表达式可任意返回任何配置项        :param expr: 提取表达式, 使用jsonpath语法,默认值提取整个读取的对象        return 根据表达式返回的值        """</span>        <span class="token keyword">return</span> extractor<span class="token punctuation">(</span>cls<span class="token punctuation">.</span>get_config_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="5"><li><p>client.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Transmission</span><span class="token punctuation">:</span>    PARAMS<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"params"</span>    DATA<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"data"</span>    JSON<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"json"</span><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">(</span>Session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> case<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> env<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"dev"</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span>  <span class="token comment">#类型注解，从3.5版本开始</span>        <span class="token triple-quoted-string string">"""处理case数据，转换成可用数据发送请求        :param case: 读取出来的每一行用例内容，可进行解包        :param env: 环境名称 默认使用config.yaml server下的 dev 后面的基准地址        return: 响应结果， 预期结果        """</span>        <span class="token punctuation">(</span>            _<span class="token punctuation">,</span> <span class="token comment">#编号</span>            case_title<span class="token punctuation">,</span> <span class="token comment">#用例标题</span>            header<span class="token punctuation">,</span> <span class="token comment">#请求头</span>            path<span class="token punctuation">,</span> <span class="token comment">#接口地址</span>            method<span class="token punctuation">,</span> <span class="token comment">#请求方式</span>            parametric_key<span class="token punctuation">,</span> <span class="token comment">#入参关键字</span>            file_obj<span class="token punctuation">,</span> <span class="token comment">#上传文件</span>            data<span class="token punctuation">,</span> <span class="token comment">#请求数据</span>            extra<span class="token punctuation">,</span> <span class="token comment">#提取参数</span>            sql<span class="token punctuation">,</span><span class="token comment">#后置sql</span>            expect<span class="token punctuation">,</span> <span class="token comment">#预期结果</span>        <span class="token punctuation">)</span> <span class="token operator">=</span> case  <span class="token comment">#将excel表格中每一行数据的每一列进行拆解</span>        logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>            <span class="token string-interpolation"><span class="token string">f"用例进行处理前数据: \n 接口路径: </span><span class="token interpolation"><span class="token punctuation">{</span>path<span class="token punctuation">}</span></span><span class="token string"> \n 请求参数: </span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token string"> \n  提取参数: </span><span class="token interpolation"><span class="token punctuation">{</span>extra<span class="token punctuation">}</span></span><span class="token string"> \n 后置sql: </span><span class="token interpolation"><span class="token punctuation">{</span>sql<span class="token punctuation">}</span></span><span class="token string"> \n 预期结果: </span><span class="token interpolation"><span class="token punctuation">{</span>expect<span class="token punctuation">}</span></span><span class="token string"> \n "</span></span>        <span class="token punctuation">)</span>  <span class="token comment">#f"",其效果类似于str.format(),从3.6版本开始</span>        <span class="token comment"># allure报告 用例标题</span>        allure_title<span class="token punctuation">(</span>case_title<span class="token punctuation">)</span>        <span class="token comment"># 处理url、header、data、file、的前置方法</span>        url <span class="token operator">=</span> DataProcess<span class="token punctuation">.</span>handle_path<span class="token punctuation">(</span>path<span class="token punctuation">,</span> env<span class="token punctuation">)</span>        header <span class="token operator">=</span> DataProcess<span class="token punctuation">.</span>handle_header<span class="token punctuation">(</span>header<span class="token punctuation">)</span>        data <span class="token operator">=</span> DataProcess<span class="token punctuation">.</span>handle_data<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        allure_step<span class="token punctuation">(</span><span class="token string">"请求数据"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        <span class="token builtin">file</span> <span class="token operator">=</span> DataProcess<span class="token punctuation">.</span>handler_files<span class="token punctuation">(</span>file_obj<span class="token punctuation">)</span>        <span class="token comment"># 发送请求</span>        response <span class="token operator">=</span> self<span class="token punctuation">.</span>_request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> parametric_key<span class="token punctuation">,</span> header<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>        <span class="token comment"># 提取参数</span>        DataProcess<span class="token punctuation">.</span>handle_extra<span class="token punctuation">(</span>extra<span class="token punctuation">,</span> response<span class="token punctuation">)</span>        <span class="token keyword">return</span> response<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> sql    <span class="token keyword">def</span> <span class="token function">_request</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> parametric_key<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span><span class="token boolean">None</span>    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param method: 请求方法        :param url: 请求url        :param parametric_key: 入参关键字， params(查询参数类型，明文传输，一般在url?参数名=参数值), data(一般用于form表单类型参数)        json(一般用于json类型请求参数)        :param data: 参数数据，默认等于None        :param file: 文件对象        :param header: 请求头        :return: 返回res对象        """</span>        <span class="token keyword">if</span> parametric_key <span class="token operator">==</span> Transmission<span class="token punctuation">.</span>PARAMS<span class="token punctuation">:</span>            extra_args <span class="token operator">=</span> <span class="token punctuation">{</span>Transmission<span class="token punctuation">.</span>PARAMS<span class="token punctuation">:</span> data<span class="token punctuation">}</span>        <span class="token keyword">elif</span> parametric_key <span class="token operator">==</span> Transmission<span class="token punctuation">.</span>DATA<span class="token punctuation">:</span>            extra_args <span class="token operator">=</span> <span class="token punctuation">{</span>Transmission<span class="token punctuation">.</span>DATA<span class="token punctuation">:</span> data<span class="token punctuation">}</span>        <span class="token keyword">elif</span> parametric_key <span class="token operator">==</span> Transmission<span class="token punctuation">.</span>JSON<span class="token punctuation">:</span>            extra_args <span class="token operator">=</span> <span class="token punctuation">{</span>Transmission<span class="token punctuation">.</span>JSON<span class="token punctuation">:</span> data<span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"可选关键字为params, json, data"</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">(</span>            method<span class="token operator">=</span>method<span class="token punctuation">,</span> url<span class="token operator">=</span>url<span class="token punctuation">,</span> files<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> <span class="token operator">**</span>extra_args        <span class="token punctuation">)</span>        response <span class="token operator">=</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span>            <span class="token string-interpolation"><span class="token string">f"\n最终请求地址:</span><span class="token interpolation"><span class="token punctuation">{</span>res<span class="token punctuation">.</span>url<span class="token punctuation">}</span></span><span class="token string">\n请求方法:</span><span class="token interpolation"><span class="token punctuation">{</span>method<span class="token punctuation">}</span></span><span class="token string">\n请求头:</span><span class="token interpolation"><span class="token punctuation">{</span>header<span class="token punctuation">}</span></span><span class="token string">\n请求参数:</span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token string">\n上传文件:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">file</span><span class="token punctuation">}</span></span><span class="token string">\n响应数据:</span><span class="token interpolation"><span class="token punctuation">{</span>response<span class="token punctuation">}</span></span><span class="token string">"</span></span>        <span class="token punctuation">)</span>        allure_step_no<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"响应耗时(s): </span><span class="token interpolation"><span class="token punctuation">{</span>res<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        allure_step<span class="token punctuation">(</span><span class="token string">"响应结果"</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>        <span class="token keyword">return</span> responseclient <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="6"><li><p>data_process.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DataProcess</span><span class="token punctuation">:</span>    <span class="token comment"># 存放提取参数的池子</span>    extra_pool <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    header <span class="token operator">=</span> ReadFile<span class="token punctuation">.</span>read_config<span class="token punctuation">(</span><span class="token string">'$.request_headers'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">handle_path</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> path_str<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> env<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""路径参数处理        :param path_str: 带提取表达式的字符串 /${id}/state/${create_time}        :param env: 环境名称， 对应的是环境基准地址        上述内容表示，从extra_pool字典里取到key为id 对应的值，假设是500，后面${create_time} 类似， 假设其值为 1605711095 最终提取结果        return  /511/state/1605711095        """</span>        url <span class="token operator">=</span> ReadFile<span class="token punctuation">.</span>read_config<span class="token punctuation">(</span>            <span class="token string-interpolation"><span class="token string">f'$.server.</span><span class="token interpolation"><span class="token punctuation">{</span>env<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span> <span class="token operator">+</span> rep_expr<span class="token punctuation">(</span>path_str<span class="token punctuation">,</span> cls<span class="token punctuation">.</span>extra_pool<span class="token punctuation">)</span>        allure_step_no<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'请求地址: </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> url    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">handle_header</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> header_str<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""处理header， 将用例中的表达式处理后 追加到基础header中        :header_str: 用例栏中的header        return header:        """</span>        <span class="token keyword">if</span> header_str <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            header_str <span class="token operator">=</span> <span class="token string">'{}'</span>        cls<span class="token punctuation">.</span>header<span class="token punctuation">.</span>update<span class="token punctuation">(</span>cls<span class="token punctuation">.</span>handle_data<span class="token punctuation">(</span>header_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        allure_step<span class="token punctuation">(</span><span class="token string">'请求头'</span><span class="token punctuation">,</span> cls<span class="token punctuation">.</span>header<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>header    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">handler_files</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> file_obj<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">object</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""file对象处理方法        :param file_obj: 上传文件使用，格式：接口中文件参数的名称:"文件路径地址"/["文件地址1", "文件地址2"]        实例- 单个文件: &amp;file&amp;D:        """</span>        <span class="token keyword">if</span> file_obj <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> convert_json<span class="token punctuation">(</span>file_obj<span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 多文件上传</span>                <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                    <span class="token keyword">for</span> path <span class="token keyword">in</span> v<span class="token punctuation">:</span>                        files<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment"># 单文件上传</span>                    files <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> <span class="token builtin">open</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            allure_step<span class="token punctuation">(</span><span class="token string">'上传文件'</span><span class="token punctuation">,</span> file_obj<span class="token punctuation">)</span>            <span class="token keyword">return</span> files    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">handle_data</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> variable<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""请求数据处理        :param variable: 请求数据，传入的是可转换字典/json的字符串,其中可以包含变量表达式        return 处理之后的json/dict类型的字典数据        """</span>        <span class="token keyword">if</span> variable <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> rep_expr<span class="token punctuation">(</span>variable<span class="token punctuation">,</span> cls<span class="token punctuation">.</span>extra_pool<span class="token punctuation">)</span>            variable <span class="token operator">=</span> convert_json<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span> variable    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">handle_sql</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> sql<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> db<span class="token punctuation">:</span> DB<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        处理sql，如果sql执行的结果不会空，执行sql的结果和参数池合并        :param sql: 支持单条或者多条sql，其中多条sql使用 ; 进行分割            多条sql,在用例中填写方式如下select * from user; select * from goods 每条sql语句之间需要使用 ; 来分割            单条sql,select * from user 或者 select * from user;        :param db: 数据库连接对象        :return:        """</span>        sql <span class="token operator">=</span> rep_expr<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> cls<span class="token punctuation">.</span>extra_pool<span class="token punctuation">)</span>        <span class="token keyword">for</span> sql <span class="token keyword">in</span> sql<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> sql<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> sql <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token comment"># 查后置sql</span>            result <span class="token operator">=</span> db<span class="token punctuation">.</span>execute_sql<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            allure_step<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'执行sql: </span><span class="token interpolation"><span class="token punctuation">{</span>sql<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>            logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'执行sql: </span><span class="token interpolation"><span class="token punctuation">{</span>sql<span class="token punctuation">}</span></span><span class="token string"> \n 结果: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            <span class="token keyword">if</span> result <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token comment"># 将查询结果添加到响应字典里面，作用在，接口响应的内容某个字段 直接和数据库某个字段比对，在预期结果中</span>                <span class="token comment"># 使用同样的语法提取即可</span>                cls<span class="token punctuation">.</span>extra_pool<span class="token punctuation">.</span>update<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">handle_extra</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> extra_str<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> response<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        处理提取参数栏        :param extra_str: excel中 提取参数栏内容，需要是 {"参数名": "jsonpath提取式"} 可以有多个        :param response: 当前用例的响应结果字典        """</span>        <span class="token keyword">if</span> extra_str <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>            extra_dict <span class="token operator">=</span> convert_json<span class="token punctuation">(</span>extra_str<span class="token punctuation">)</span>            <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> extra_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                cls<span class="token punctuation">.</span>extra_pool<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> extractor<span class="token punctuation">(</span>response<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token comment">#将提取到参数放进变量池，以便后面使用</span>                logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'加入依赖字典,key: </span><span class="token interpolation"><span class="token punctuation">{</span>k<span class="token punctuation">}</span></span><span class="token string">, 对应value: </span><span class="token interpolation"><span class="token punctuation">{</span>v<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">assert_result</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> response<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">,</span> expect_str<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" 预期结果实际结果断言方法        :param response: 实际响应结果        :param expect_str: 预期响应内容，从excel中读取        return None        """</span>        <span class="token comment"># 后置sql变量转换</span>        allure_step<span class="token punctuation">(</span><span class="token string">"当前可用参数池"</span><span class="token punctuation">,</span> cls<span class="token punctuation">.</span>extra_pool<span class="token punctuation">)</span>        expect_str <span class="token operator">=</span> rep_expr<span class="token punctuation">(</span>expect_str<span class="token punctuation">,</span> cls<span class="token punctuation">.</span>extra_pool<span class="token punctuation">)</span>        expect_dict <span class="token operator">=</span> convert_json<span class="token punctuation">(</span>expect_str<span class="token punctuation">)</span>        index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> expect_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 获取需要断言的实际结果部分</span>            actual <span class="token operator">=</span> extractor<span class="token punctuation">(</span>response<span class="token punctuation">,</span> k<span class="token punctuation">)</span>            index <span class="token operator">+=</span> <span class="token number">1</span>            logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span>                <span class="token string-interpolation"><span class="token string">f'第</span><span class="token interpolation"><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token string">个断言,实际结果:</span><span class="token interpolation"><span class="token punctuation">{</span>actual<span class="token punctuation">}</span></span><span class="token string"> | 预期结果:</span><span class="token interpolation"><span class="token punctuation">{</span>v<span class="token punctuation">}</span></span><span class="token string"> \n断言结果 </span><span class="token interpolation"><span class="token punctuation">{</span>actual <span class="token operator">==</span> v<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            allure_step<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'第</span><span class="token interpolation"><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token string">个断言'</span></span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'实际结果:</span><span class="token interpolation"><span class="token punctuation">{</span>actual<span class="token punctuation">}</span></span><span class="token string"> = 预期结果:</span><span class="token interpolation"><span class="token punctuation">{</span>v<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">assert</span> actual <span class="token operator">==</span> v            <span class="token keyword">except</span> AssertionError<span class="token punctuation">:</span>                <span class="token keyword">raise</span> AssertionError<span class="token punctuation">(</span>                    <span class="token string-interpolation"><span class="token string">f'第</span><span class="token interpolation"><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token string">个断言失败 -|- 实际结果:</span><span class="token interpolation"><span class="token punctuation">{</span>actual<span class="token punctuation">}</span></span><span class="token string"> || 预期结果: </span><span class="token interpolation"><span class="token punctuation">{</span>v<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="7"><li><p>tools/<strong>init</strong>.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">exec_func</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""执行函数(exec可以执行Python代码)    :params func 字符的形式调用函数    : return 返回的将是个str类型的结果    """</span>    <span class="token comment"># 得到一个局部的变量字典，来修正exec函数中的变量，在其他函数内部使用不到的问题</span>    loc <span class="token operator">=</span> <span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"result = </span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span class="token comment">#执行函数，返回数据赋值给result</span>    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>loc<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">extractor</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">,</span> expr<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    根据表达式提取字典中的value，表达式, . 提取字典所有内容， $.case 提取一级字典case， $.case.data 提取case字典下的data    :param obj :json/dict类型数据    :param expr: 表达式, . 提取字典所有内容， $.case 提取一级字典case， $.case.data 提取case字典下的data    $.0.1 提取字典中的第一个列表中的第二个的值    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> jsonpath<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#使用jsonpath来提取json内容，JsonPath用符号$表示最外层对象，类似于Xpath中的根元素，.相当与/；..相当于//</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>expr<span class="token punctuation">}</span></span><span class="token string"> - 提取不到内容，丢给你一个错误！</span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        result <span class="token operator">=</span> expr    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">rep_expr</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""从请求参数的字符串中，使用正则的方法找出合适的字符串内容并进行替换    :param content: 原始的字符串内容    :param data: 提取的参数变量池    return content： 替换表达式后的字符串    """</span>    content <span class="token operator">=</span> Template<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>safe_substitute<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">#对类似于${username}用data字典中的key为username进行替换</span>    <span class="token keyword">for</span> func <span class="token keyword">in</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\\${(.*?)}'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#查找是否还有${函数名}的变量，如果有函数执行后进行结果替换，就进行替换，例如是md5(123456)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'${%s}'</span> <span class="token operator">%</span> func<span class="token punctuation">,</span> exec_func<span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">return</span> content<span class="token keyword">def</span> <span class="token function">convert_json</span><span class="token punctuation">(</span>dict_str<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param dict_str: 长得像字典的字符串    return json格式的内容    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'None'</span> <span class="token keyword">in</span> dict_str<span class="token punctuation">:</span>            dict_str <span class="token operator">=</span> dict_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'null'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token string">'True'</span> <span class="token keyword">in</span> dict_str<span class="token punctuation">:</span>            dict_str <span class="token operator">=</span> dict_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'True'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token string">'False'</span> <span class="token keyword">in</span> dict_str<span class="token punctuation">:</span>            dict_str <span class="token operator">=</span> dict_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'False'</span><span class="token punctuation">,</span> <span class="token string">'false'</span><span class="token punctuation">)</span>        dict_str <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>dict_str<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'null'</span> <span class="token keyword">in</span> dict_str<span class="token punctuation">:</span>            dict_str <span class="token operator">=</span> dict_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'null'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token string">'true'</span> <span class="token keyword">in</span> dict_str<span class="token punctuation">:</span>            dict_str <span class="token operator">=</span> dict_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'true'</span><span class="token punctuation">,</span> <span class="token string">'True'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token string">'false'</span> <span class="token keyword">in</span> dict_str<span class="token punctuation">:</span>            dict_str <span class="token operator">=</span> dict_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'false'</span><span class="token punctuation">,</span> <span class="token string">'False'</span><span class="token punctuation">)</span>        dict_str <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>dict_str<span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">return</span> dict_str<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">allure_title</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""allure中显示的用例标题"""</span>    allure<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">allure_step</span><span class="token punctuation">(</span>step<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> var<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param step: 步骤及附件名称    :param var: 附件内容    """</span>    <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>        allure<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>            json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>                var<span class="token punctuation">,</span>                ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            step<span class="token punctuation">,</span>            allure<span class="token punctuation">.</span>attachment_type<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">allure_step_no</span><span class="token punctuation">(</span>step<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    无附件的操作步骤    :param step: 步骤名称    :return:    """</span>    <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关键思想</p><ol><li><p>将某些关键的返回数据放进一个类（该类没有实例）的变量池（字典），供后面接口共用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DataProcess</span><span class="token punctuation">:</span>    <span class="token comment"># 存放提取参数的池子</span>    extra_pool <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    header <span class="token operator">=</span> ReadFile<span class="token punctuation">.</span>read_config<span class="token punctuation">(</span><span class="token string">'$.request_headers'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">handle_path</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> path_str<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> env<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""路径参数处理        :param path_str: 带提取表达式的字符串 /${id}/state/${create_time}        :param env: 环境名称， 对应的是环境基准地址        上述内容表示，从extra_pool字典里取到key为id 对应的值，假设是500，后面${create_time} 类似， 假设其值为 1605711095 最终提取结果        return  /511/state/1605711095        """</span>        url <span class="token operator">=</span> ReadFile<span class="token punctuation">.</span>read_config<span class="token punctuation">(</span>            <span class="token string-interpolation"><span class="token string">f'$.server.</span><span class="token interpolation"><span class="token punctuation">{</span>env<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span> <span class="token operator">+</span> rep_expr<span class="token punctuation">(</span>path_str<span class="token punctuation">,</span> cls<span class="token punctuation">.</span>extra_pool<span class="token punctuation">)</span>        allure_step_no<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'请求地址: </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>底层请求只建一个单例</p><p>init.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>client <span class="token keyword">import</span> client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>client.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">(</span>Session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> case<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> env<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"dev"</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span>  <span class="token comment">#类型注解，从3.5版本开始</span>        <span class="token triple-quoted-string string">"""处理case数据，转换成可用数据发送请求        :param case: 读取出来的每一行用例内容，可进行解包        :param env: 环境名称 默认使用config.yaml server下的 dev 后面的基准地址        return: 响应结果， 预期结果        """</span>     <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">_request</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> parametric_key<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span><span class="token boolean">None</span>    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param method: 请求方法        :param url: 请求url        :param parametric_key: 入参关键字， params(查询参数类型，明文传输，一般在url?参数名=参数值), data(一般用于form表单类型参数)        json(一般用于json类型请求参数)        :param data: 参数数据，默认等于None        :param file: 文件对象        :param header: 请求头        :return: 返回res对象        """</span>        <span class="token keyword">pass</span>client <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将excel的参数分成三类，一类含有函数名：${函数()}，例如${md5(“123456”)} 提取后用exec执行后返回结果，相当于jmeter中的函数助手；一类含有变量名：${userId}，通过变量池中进行替换；一类含有位置的变量名，主要是提取返回信息，放进变量池或者预期结果进行对比</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">exec_func</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""执行函数(exec可以执行Python代码)    :params func 字符的形式调用函数    : return 返回的将是个str类型的结果    """</span>    <span class="token comment"># 得到一个局部的变量字典，来修正exec函数中的变量，在其他函数内部使用不到的问题</span>    loc <span class="token operator">=</span> <span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"result = </span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>loc<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    txt<span class="token operator">=</span><span class="token string">""</span>    md<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    md<span class="token punctuation">.</span>update<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    txt<span class="token operator">=</span>md<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>    <span class="token keyword">return</span> txtexec_func<span class="token punctuation">(</span><span class="token string">"md5('123456')"</span><span class="token punctuation">)</span>  <span class="token comment">#123456;e10adc3949ba59abbe56e057f20f883e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rep_expr</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""从请求参数的字符串中，使用正则的方法找出合适的字符串内容并进行替换    :param content: 原始的字符串内容    :param data: 提取的参数变量池    return content： 替换表达式后的字符串    """</span>    content <span class="token operator">=</span> Template<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>safe_substitute<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">#对类似于${username}用data字典中的key为username进行替换</span>    <span class="token keyword">for</span> func <span class="token keyword">in</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\\${(.*?)}'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#查找是否还有${函数名}的变量，如果有函数执行后进行结果替换，就进行替换，例如是md5(123456)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'${%s}'</span> <span class="token operator">%</span> func<span class="token punctuation">,</span> exec_func<span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">return</span> content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extractor</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">,</span> expr<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    根据表达式提取字典中的value，表达式, . 提取字典所有内容， $.case 提取一级字典case， $.case.data 提取case字典下的data    :param obj :json/dict类型数据    :param expr: 表达式, . 提取字典所有内容， $.case 提取一级字典case， $.case.data 提取case字典下的data    $.0.1 提取字典中的第一个列表中的第二个的值    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> jsonpath<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#使用jsonpath来提取json内容，JsonPath用符号$表示最外层对象，类似于Xpath中的根元素，.相当与/；..相当于//</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>expr<span class="token punctuation">}</span></span><span class="token string"> - 提取不到内容，丢给你一个错误！</span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        result <span class="token operator">=</span> expr    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口 </tag>
            
            <tag> 自动化 </tag>
            
            <tag> python </tag>
            
            <tag> allure </tag>
            
            <tag> pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Typora并使用gitee做图床</title>
      <link href="/BlogHome/posts/f77593bb.html"/>
      <url>/BlogHome/posts/f77593bb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>安装Typora</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用gitee镜像下载https://gitee.com/typora-mirror/Typora-Mirror/releases<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>安装Node.js</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https://nodejs.org/en/download/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="3"><li><p>安装PicGo并配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#下载并安装https://github.com/Molunerfinn/PicGo/releases#安装gitee插件#配置gitee图床#修改server监听端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220114234148.png" alt="image-20220114234146351"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220114234236.png" alt="image-20220114234235276"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220114234315.png" alt="image-20220114234314612"></p></li><li><p>配置Typora</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220114234535.png" alt="image-20220114234534182"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220114234615.png" alt="image-20220114234614132"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitee </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm编辑器设置py文件开头样式</title>
      <link href="/BlogHome/posts/ddeeb770.html"/>
      <url>/BlogHome/posts/ddeeb770.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="pycharm编辑器设置py文件开头样式"><a href="#pycharm编辑器设置py文件开头样式" class="headerlink" title="pycharm编辑器设置py文件开头样式"></a>pycharm编辑器设置py文件开头样式</h3><ol><li><p>文件–设置–编辑器–文件和代码模板–Python Script</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220115151547.png" alt="image-20220115151545826"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulReport生成的报告打开没有内容及一张图片显示不出来</title>
      <link href="/BlogHome/posts/45e210fa.html"/>
      <url>/BlogHome/posts/45e210fa.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="BeautifulReport生成的报告打开没有内容及一张图片显示不出来"><a href="#BeautifulReport生成的报告打开没有内容及一张图片显示不出来" class="headerlink" title="BeautifulReport生成的报告打开没有内容及一张图片显示不出来"></a>BeautifulReport生成的报告打开没有内容及一张图片显示不出来</h3><ol><li><p>用BeautifulReport==0.1.3，用官网的例子的生成html报告，打开发现没有内容，一开始以为是程序有问题，后来经过查找，发现是js和css引用访问不了</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220201090936.png" alt="image-20220201090933313"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220201091032.png" alt="image-20220201091030929"></p><p>F12查看</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220201091132.png" alt="image-20220201091128235"></p><p>解决办法：下载到本地，直接引用</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220201092440.png" alt="image-20220201091701208"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220201091724.png" alt="image-20220201091721834"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220201092441.png" alt="image-20220201091759372"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220201092442.png" alt="image-20220201091840495"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220201092443.png" alt="image-20220201091909534"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220201092444.png" alt="image-20220201091923586"></p></li><li><p>一张图片显示不了，是因为beautifulreport.py，源码有问题</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220201092445.png" alt="image-20220201092342360"></p><p>改成</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220201092446.png" alt="image-20220201092427913"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BeautifulReport </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Allure 报告中显示问题，修改源码</title>
      <link href="/BlogHome/posts/63b7ef00.html"/>
      <url>/BlogHome/posts/63b7ef00.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\BlogHome\assets\css\APlayer.min.css"><script src="\BlogHome\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Allure-报告中显示问题，修改源码"><a href="#Allure-报告中显示问题，修改源码" class="headerlink" title="Allure 报告中显示问题，修改源码"></a>Allure 报告中显示问题，修改源码</h3><ol><li><p>allure.title去掉后方的参数化显示</p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211140727.png" alt="image-20220211140451468"></p><p>解决办法：</p><p><em>listener.py 文件位置：Lib\site-packages\allure_pytest\listener.py （第三方包所在的LIb目录） 将下图中红色部分test_result.parameters.extend([]) 中参数改成空列表就行了</em></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211140728.png" alt="image-20220211140601766"></p><p><img src="https://gitee.com/yizhenfeng2016/blog-image/raw/master/img/20220211140729.png" alt="image-20220211140649375"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Allure </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
