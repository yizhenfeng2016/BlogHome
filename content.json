{"meta":{"title":"一阵风","subtitle":"博客空间","description":"本科 | 应用物理 | 测试","author":"一阵风","url":"https://yizhenfeng2016.github.io","root":"/BlogHome/"},"pages":[{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"404.html","permalink":"https://yizhenfeng2016.github.io/404.html","excerpt":"","text":""},{"title":"","date":"2022-03-05T14:22:36.123Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"https://yizhenfeng2016.github.io/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"","date":"2022-03-05T14:22:36.132Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"https://yizhenfeng2016.github.io/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"放松一下","date":"2022-03-04T16:00:00.000Z","updated":"2022-03-05T15:46:24.755Z","comments":true,"path":"List/index.html","permalink":"https://yizhenfeng2016.github.io/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"archives","date":"2022-03-04T16:00:00.000Z","updated":"2022-03-05T15:47:44.446Z","comments":true,"path":"archives/index.html","permalink":"https://yizhenfeng2016.github.io/archives/index.html","excerpt":"","text":""},{"title":"about","date":"2022-03-04T16:00:00.000Z","updated":"2022-03-05T15:48:05.961Z","comments":true,"path":"about/index.html","permalink":"https://yizhenfeng2016.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-03-04T16:00:00.000Z","updated":"2022-03-05T15:47:22.052Z","comments":true,"path":"categories/index.html","permalink":"https://yizhenfeng2016.github.io/categories/index.html","excerpt":"","text":""},{"title":"统计","date":"2022-03-04T16:00:00.000Z","updated":"2022-03-05T15:46:59.226Z","comments":true,"path":"census/index.html","permalink":"https://yizhenfeng2016.github.io/census/index.html","excerpt":"","text":""},{"title":"留言板","date":"2022-03-04T16:00:00.000Z","updated":"2022-03-08T09:05:41.079Z","comments":true,"path":"contact/index.html","permalink":"https://yizhenfeng2016.github.io/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 一阵风の友链信息 博客名称: 一阵风 博客网址: https://yizhenfeng2016.github.io/BlogHome/ 博客介绍: The harder you work, the luckier you will be."},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"friends/index.html","permalink":"https://yizhenfeng2016.github.io/friends/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2022-03-04T16:00:00.000Z","updated":"2022-03-05T15:45:17.147Z","comments":true,"path":"resource/index.html","permalink":"https://yizhenfeng2016.github.io/resource/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-03-04T16:00:00.000Z","updated":"2022-03-05T15:44:45.890Z","comments":true,"path":"tags/index.html","permalink":"https://yizhenfeng2016.github.io/tags/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-03-05T14:22:35.841Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/movies/index.html","permalink":"https://yizhenfeng2016.github.io/List/movies/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2022-03-04T16:00:00.000Z","updated":"2022-03-05T15:45:55.359Z","comments":true,"path":"List/tools/index.html","permalink":"https://yizhenfeng2016.github.io/List/tools/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/music/index.html","permalink":"https://yizhenfeng2016.github.io/List/music/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2022-03-05T14:22:35.846Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2022-03-05T14:22:35.843Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2022-03-05T14:22:35.850Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2022-03-05T14:22:35.852Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2022-03-05T14:22:35.857Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2022-03-05T14:22:35.855Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2022-03-05T14:22:35.862Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2022-03-05T14:22:35.860Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2022-03-05T14:22:35.865Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2022-03-05T14:22:35.863Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2022-03-05T14:22:35.871Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2022-03-05T14:22:35.868Z","updated":"2021-06-13T05:55:39.000Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"https://yizhenfeng2016.github.io/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo搭建个人博客","slug":"Hexo搭建个人博客","date":"2022-03-08T10:31:48.000Z","updated":"2022-03-09T02:33:32.435Z","comments":true,"path":"posts/76be7035.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/76be7035.html","excerpt":"","text":"Hexo搭建个人博客前言你了解 Hexo 吗？ Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 几个月前偶然间了解到了 Hexo 这个静态博客网站，很适合那些喜欢写作的朋友们，最重要的是它是免费的，里面有许多的博客主题模板，这些主题都是一些很牛的大佬们开发的，而且设计的主题都很棒，让我很心动，心动不如行动，于是开始整理搭建属于自己的博客。直到今天，这中间经历了许多的坎坷荆棘，我将我的博客搭建的流程分享出来，能为那些博客小石榴们提供一些帮助吧，如果有错的话，请给我留言，我会及时修改，废话不多说，直接上教程。 一、博客环境搭建1. 下载 Git 和 Node.js1.1 Node.js的安装与配置首先去 Node.js 官网 下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。（建议不要安装太高版本） 验证安装，并测试是否加入环境变量： 建议安装cnpm，两者区别： npm（node package manager）：nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等） cnpm：是一个完整 npmjs.org 镜像，可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。 npm install -g cnpm --registry=https://registry.npm.taobao.org 1.2 Git 的安装与配置首先就是去 Git 官网下载 Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。 2. 安装hexo 首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为 blogtest 的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择 Git Bash Here，然后依次输入如下命令 # hexo框架的安装 npm install -g hexo-cli # 等上一个命令完成后，在输入下面的命令 hexo init &lt;新建文件夹的名称&gt; #初始化文件夹（blogtest） cd &lt;新建文件夹的名称&gt; npm install # 安装博客所需要的依赖文件 等待运行完成，此时文件夹中多了许多文件。 注意：后续的命令均需要在站点目录下（即文件夹内）使用 Git Bash 运行。 此时 Hexo 框架的本地搭建已经完成了。我们来运行一下看看，命令行依次输入以下命令 : hexo clean #清理 hexo g #生成静态文件 hexo s #启动服务 hexo d #推送到代码托管服务器 浏览器中打开 http://localhost:4000 或者 127.0.0.1:4000，可以看到一个网页，说明 Hexo 博客已经成功在本地运行。 3. 发布到GitHub 首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下： npm install hexo-deployer-git --save 从开源库拉取代码，安装LuckyBlog git clone https://github.com/LuckyZmj/LuckyBlog.git 最后使用 npm i 或者 npm install 安装依赖环境包即可。(参考http://www.luckyzmj.cn/posts/d74d8b76.html) 紧接着，将本地目录与 GitHub 关联起来，输入下面的命令行： ssh-keygen -t rsa -C \"你的邮箱地址\" 进入博客站点目录，用文本编辑器打开_config.yml，这个_config.yml 是博客的配置文件，在以后的博客修改，如个性化修改，博客 SEO 优化等都会使用到，修改如下图的几个地方： title: 你的博客名 subtitle: 博客的副标题，有些主题支持 description: 博客描述 keywords: 博客关键词 author: 作者，在文章中显示 language: 博客语言语种 timezone: 时区 # Hexo Configuration ## Docs: https://hexo.io/docs/configuration.html ## Source: https://github.com/hexojs/hexo/ # Site title: 一阵风 subtitle: '博客空间' description: '本科 | 应用物理 | 测试' keywords: '一阵风 计算机 物理 测试' author: 一阵风 language: zh-CN timezone: '' # URL ## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/' url: https://yizhenfeng2016.github.io root: /BlogHome/ # permalink: :year/:month/:day/:title/ permalink: posts/:abbrlink.html # p 是自定义的前缀 abbrlink: alg: crc32 #算法： crc16(default) and crc32 rep: hex #进制： dec(default) and hex permalink_defaults: pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks # Directory source_dir: source public_dir: public tag_dir: tags archive_dir: archives category_dir: categories code_dir: downloads/code i18n_dir: :lang skip_render: - 'tools/*' - 'tools/**' - 'GoogleHacking/*' - 'GoogleHacking/**' - 'Windows/*' - 'Windows/**' # Writing new_post_name: :title.md # File name of new posts default_layout: post titlecase: false # Transform title into titlecase external_link: enable: true # Open external links in new tab field: site # Apply to the whole site exclude: '' filename_case: 0 render_drafts: false post_asset_folder: false relative_link: false future: true highlight: enable: false line_number: true auto_detect: false tab_replace: '' wrap: true hljs: false prismjs: enable: true preprocess: true line_number: true tab_replace: '' # Home page setting # path: Root path for your blogs index page. (default = '') # per_page: Posts displayed per page. (0 = disable pagination) # order_by: Posts order. (Order by date descending by default) index_generator: path: '' per_page: 12 #下半部文章页面显示数 order_by: -date # Category &amp; Tag default_category: uncategorized category_map: tag_map: # Metadata elements ## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta meta_generator: true # Date / Time format ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http://momentjs.com/docs/#/displaying/format/ date_format: YYYY-MM-DD time_format: HH:mm:ss ## updated_option supports 'mtime', 'date', 'empty' updated_option: 'mtime' # Pagination ## Set per_page to 0 to disable pagination per_page: 6 # 推荐文章以及分类标签显示数 pagination_dir: page # Include / Exclude file(s) ## include:/exclude: options only apply to the 'source/' folder include: exclude: ignore: # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: matery # Extensions ## Plugins: http://hexo.io/plugins/ #RSS订阅 plugin: - hexo-generator-feed - hexo-generator-baidu-sitemap - hexo-generator-sitemap baidusitemap: path: baidusitemap.xml sitemap: path: sitemap.xml # Deployment ## Docs: https://hexo.io/docs/one-command-deployment deploy: type: git repo: https://github.com/yizhenfeng2016/BlogHome.git branch: master # baidu submit baidu_url_submit: count: 40 # 提交最新的一个链接 host: yizhenfeng2016.github.io # 在百度站长平台中注册的域名 token: xxxxxxxxxxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里 # matery搜索功能 search: path: search.xml field: post # 中文链接转拼音 permalink_pinyin: enable: true separator: '-' # default: '-' # emoji表情支持 githubEmojis: enable: true className: github-emoji inject: true styles: customEmojis: lazyload: enable: false # 是否开启图片懒加载 onlypost: true # 是否只对文章的图片做懒加载 loadingImg: https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg # eg ./images/loading.gif #压缩js、css、html等，优化加载速度 all_minifier: true 两个重要的配置文件 网站配置：根目录/_config.yml 主题配置：根目录/themes/matery/_config.yml # Hexo Configuration ## Docs: https://hexo.io/docs/configuration.html ## Source: https://github.com/hexojs/hexo/ # Site title: 一阵风 subtitle: '博客空间' description: '本科 | 应用物理 | 测试' keywords: '一阵风 计算机 物理 测试' author: 一阵风 language: zh-CN timezone: '' # URL ## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/' url: https://yizhenfeng2016.github.io root: /BlogHome/ # permalink: :year/:month/:day/:title/ permalink: posts/:abbrlink.html # p 是自定义的前缀 abbrlink: alg: crc32 #算法： crc16(default) and crc32 rep: hex #进制： dec(default) and hex permalink_defaults: pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks # Directory source_dir: source public_dir: public tag_dir: tags archive_dir: archives category_dir: categories code_dir: downloads/code i18n_dir: :lang skip_render: - 'tools/*' - 'tools/**' - 'GoogleHacking/*' - 'GoogleHacking/**' - 'Windows/*' - 'Windows/**' # Writing new_post_name: :title.md # File name of new posts default_layout: post titlecase: false # Transform title into titlecase external_link: enable: true # Open external links in new tab field: site # Apply to the whole site exclude: '' filename_case: 0 render_drafts: false post_asset_folder: false relative_link: false future: true highlight: enable: false line_number: true auto_detect: false tab_replace: '' wrap: true hljs: false prismjs: enable: true preprocess: true line_number: true tab_replace: '' # Home page setting # path: Root path for your blogs index page. (default = '') # per_page: Posts displayed per page. (0 = disable pagination) # order_by: Posts order. (Order by date descending by default) index_generator: path: '' per_page: 12 #下半部文章页面显示数 order_by: -date # Category &amp; Tag default_category: uncategorized category_map: tag_map: # Metadata elements ## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta meta_generator: true # Date / Time format ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http://momentjs.com/docs/#/displaying/format/ date_format: YYYY-MM-DD time_format: HH:mm:ss ## updated_option supports 'mtime', 'date', 'empty' updated_option: 'mtime' # Pagination ## Set per_page to 0 to disable pagination per_page: 6 # 推荐文章以及分类标签显示数 pagination_dir: page # Include / Exclude file(s) ## include:/exclude: options only apply to the 'source/' folder include: exclude: ignore: # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: matery # Extensions ## Plugins: http://hexo.io/plugins/ #RSS订阅 plugin: - hexo-generator-feed - hexo-generator-baidu-sitemap - hexo-generator-sitemap baidusitemap: path: baidusitemap.xml sitemap: path: sitemap.xml # Deployment ## Docs: https://hexo.io/docs/one-command-deployment deploy: type: git repo: https://github.com/yizhenfeng2016/BlogHome.git branch: master # baidu submit baidu_url_submit: count: 40 # 提交最新的一个链接 host: yizhenfeng2016.github.io # 在百度站长平台中注册的域名 token: xxxxxxxxxxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里 # matery搜索功能 search: path: search.xml field: post # 中文链接转拼音 permalink_pinyin: enable: true separator: '-' # default: '-' # emoji表情支持 githubEmojis: enable: true className: github-emoji inject: true styles: customEmojis: lazyload: enable: false # 是否开启图片懒加载 onlypost: true # 是否只对文章的图片做懒加载 loadingImg: https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg # eg ./images/loading.gif #压缩js、css、html等，优化加载速度 all_minifier: true github page 使用 二、优化1. 压缩 npm install hexo-all-minifier --save 如果失败，采用下面 cnpm install hexo-all-minifier --save 配置： all_minifier: true 2.首页加载视频 # Whether to display the videos. # 是否在首页显示视频. video: enable: true showTitle: true title: 精彩视频 url: /medias/videos/demo.mp4# 必填 pic: /medias/videos/demo-pic.png #iframeUrl: http://player.bilibili.com/player.html?aid=669520137&amp;bvid=BV1oa4y1L7mw&amp;cid=234543483&amp;page=1 #在bilibili或者爱奇艺分享时选择iframe，然后填那个url来这里，sample: thumbnails: height: 400 # 如：400 autoplay: false # 是否自动播放 theme: '#42b983' loop: false # 是否循环播放 preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto' volume: 0.7 3. 文章列表随机显示图片 # The post featured images that needs to be displayed when there is no image. # 无文章特色图片时需要显示的文章特色图片. featureImages: - /medias/featureimages/0.jpg - /medias/featureimages/1.jpg - /medias/featureimages/2.jpg - /medias/featureimages/3.jpg - /medias/featureimages/4.jpg - /medias/featureimages/5.jpg - /medias/featureimages/6.jpg - /medias/featureimages/7.jpg - /medias/featureimages/8.jpg - /medias/featureimages/9.jpg - /medias/featureimages/10.jpg - /medias/featureimages/11.jpg - /medias/featureimages/12.jpg - /medias/featureimages/13.jpg - /medias/featureimages/14.jpg - /medias/featureimages/15.jpg - /medias/featureimages/16.jpg - /medias/featureimages/17.jpg - /medias/featureimages/18.jpg - /medias/featureimages/19.jpg - /medias/featureimages/20.jpg - /medias/featureimages/21.jpg - /medias/featureimages/22.jpg - /medias/featureimages/23.jpg 4. 新建文章，直接启动Typora写新文章时，需要控制台执行 `hexo new \"文章名字\"`，这样就会在`_posts` 下生成一篇新文章，但需要手动打开，挺麻烦，只需要在站点根目录下新建 `scripts` 目录，然后在新建 `auto_open.js`，在文件填入一下内容： var spawn = require('child_process').exec; // Hexo 2.x 用户复制这段 //hexo.on('new', function(path){ //spawn('start \"markdown编辑器绝对路径.exe\" ' + path); //}); // Hexo 3 用户复制这段 hexo.on('new', function(data){ spawn('start \"D:\\Program Files\\Typora\\Typora.exe\" ' + data.path); }); 5. 编写脚本bat，直接创建文章，并发布1. Hexo创建文章.bat d: cd D:\\BlogHome\\blogs set name=%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%%time:~6,2% hexo new %name% pause 2.Hexo发布文章.bat d: cd D:\\BlogHome\\blogs \"D:\\Program Files\\Git\\git-bash.exe\" -c \"hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; exec /bin/bash\"","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://yizhenfeng2016.github.io/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"https://yizhenfeng2016.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"漏洞扫描工具--AppScan和Nessus","slug":"漏洞扫描工具-AppScan和Nessus","date":"2022-03-05T17:23:54.000Z","updated":"2022-03-08T08:40:14.470Z","comments":true,"path":"posts/e3c6b0aa.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/e3c6b0aa.html","excerpt":"","text":"漏洞扫描工具–AppScan和Nessus1.AppScan安装参考：http://luckyzmj.cn/posts/6c5da8c0.html 下载地址： https://pan.baidu.com/s/1LhVlrLawEC-_nsCSkY5GVQ 提取码： g99w AppScan 推出了新的标准技术预览代码版本，启动 AppScanGui.exe 即可 2.Nessus安装（centos7）参考：http://luckyzmj.cn/posts/477c90d0.html 1.下载xxx.rpm https://www.tenable.com/downloads/nessus 2.上传到/root 3.安装，自动安装到/opt目录 rpm -ivh xxx.rpm 4.systemctl start nessusd.service 5.安装firewalld yum install -y firewalld firewall-config 配置 firewall-cmd --zone=public --add-port=8834/tcp --permanent firewall-cmd --reload 安装完成后进行系统设置，打开访问网址 https://127.0.0.1:8834，初始化扫描器。 根据提示步骤，选择 Managed Scanner 再选择 Tenable.sc 最后，点击继续，创建账号密码即可登录 更新漏洞库 注册地址：https://zh-cn.tenable.com/products/nessus/nessus-essentials 1.打开安装目录 /opt/nessus/sbin ./nessuscli fetch --challenge 2.下载离线插件 打开网址 https://plugins.nessus.org/v2/offline.php，填入上两步获取的内容，即可得一个离线的插件包，选择合适的版本进行下载，拖到服务器上面安装即可。命令：./nessuscli update all-2.0.tar.gz。另外需要将网页上的license保存下来，稍后有用。 提示：如果执行命令的时候出现了类似说你的软件是从哪copy来的吧，意思就是你的软件没有激活。输入./nessuscli fetch --register-offline nessus.license，就可以顺利执行命令了。 注意：更新完漏洞库后，记住version版本号，如上述中的version版本号为 202203041934，之后破解时会用到这个。 破解方法1.重启服务（systemctl restart nessusd）后，打开nessus页面，确认插件编译完成后，出现登录框，才能找到网上说的plugin_feed_info.inc 这两个文件，否则是没有生成的 find ./ -name plugin* 2.打开plugin_feed_info.inc PLUGIN_SET = \"202203041934\"; PLUGIN_FEED = \"ProfessionalFeed (Direct)\"; PLUGIN_FEED_TRANSPORT = \"Tenable Network Security Lightning\"; 3.重启服务（systemctl restart nessusd） 使用 如果你在破解完后使用工具扫描网站，发现每个目标扫描时间都是几秒钟就立刻结束，扫描不到任何漏洞。那么很有可能是你在破解重启Nessus服务环节的时候，软件自动把Nessus的漏洞库插件全清除了，也就是在安装目录下（C:\\ProgramData\\Tenable\\Nessus\\nessus\\plugins\\）没有任何漏洞插件文件了。 如果真碰到这种情况，那就按照之前的步骤重新更新下漏洞库，然后再破解一遍。或者是在更新完漏洞库后，将nessus\\plugins\\目录拷贝一份，等破解完重启服务，重进Nessus加载完后退出，再将事先拷贝的文件复制回去。","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"漏洞","slug":"漏洞","permalink":"https://yizhenfeng2016.github.io/tags/%E6%BC%8F%E6%B4%9E/"},{"name":"AppScan","slug":"AppScan","permalink":"https://yizhenfeng2016.github.io/tags/AppScan/"},{"name":"Nessus","slug":"Nessus","permalink":"https://yizhenfeng2016.github.io/tags/Nessus/"}]},{"title":"Centos7 安装后修改网络","slug":"Centos7-安装后修改网络","date":"2022-03-05T17:22:54.000Z","updated":"2022-03-08T08:46:30.069Z","comments":true,"path":"posts/d8b9b974.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/d8b9b974.html","excerpt":"","text":"Centos7 安装后修改网络1.配置 /etc/sysconfig/network-scripts/ifcfg-ensxx TYPE=Ethernet PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=static DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=ens33 UUID=f40e4c3f-b0b0-4729-8170-ef8ee6ad7bee DEVICE=ens33 ONBOOT=yes IPADDR=192.168.242.37 GATEWAY=192.168.242.2 NETMASK=255.255.255.0 DNS1=192.168.242.2","categories":[{"name":"Linux篇","slug":"Linux篇","permalink":"https://yizhenfeng2016.github.io/categories/Linux%E7%AF%87/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://yizhenfeng2016.github.io/tags/Centos7/"},{"name":"network","slug":"network","permalink":"https://yizhenfeng2016.github.io/tags/network/"}]},{"title":"直接用命令启动docker的镜像","slug":"直接用命令启动docker的镜像","date":"2022-03-05T17:22:22.000Z","updated":"2022-03-08T08:46:54.333Z","comments":true,"path":"posts/77749a8a.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/77749a8a.html","excerpt":"","text":"直接用命令启动docker的镜像docker run -itd --add-host dev.db.java110.com:192.168.242.33 --add-host dev.redis.java110.com:192.168.242.33 --add-host dev.java110.com:192.168.242.33 -e MAX_MEM=\"-Xmx256m\" -e MIN_MEM=\"-Xms256m\" -e mysqlpwd=\"hc12345678\" -e ACTIVE=\"zihao\" -e redispwd=\"hc12345678\" -p 1199:1199 --name myjob myjob:V20220224 --name myjob //镜像名 --add-host dev.db.java110.com:192.168.242.33 //在启动容器时，向/etc/hosts文件添加一个host:ip的映射 -e MIN_MEM=\"-Xms256m\" //环境变量 -p 1199:1199 //端口映射 -v /home/data/mysql:/var/lib/mysql //磁盘映射 相当于：dockers-compose.yml - service-oa: image: registry.cn-qingdao.aliyuncs.com/homecommunity/service-oa:V20220105180358 volumes: [] ports: [] extra_hosts: - dev.java110.com:192.168.242.33 - dev.redis.java110.com:192.168.242.33 - dev.db.java110.com:192.168.242.33 environment: - MAX_MEM:-Xmx64m - MIN_MEM:-Xms64m - mysqlpwd:hc12345678 - ACTIVE:zihao - redispwd:hc12345678","categories":[{"name":"Linux篇","slug":"Linux篇","permalink":"https://yizhenfeng2016.github.io/categories/Linux%E7%AF%87/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://yizhenfeng2016.github.io/tags/docker/"}]},{"title":"测试知识点之操作系统考察","slug":"测试知识点之操作系统考察","date":"2022-03-05T17:21:42.000Z","updated":"2022-03-08T08:31:16.913Z","comments":true,"path":"posts/68a5cde4.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/68a5cde4.html","excerpt":"","text":"测试知识点之操作系统考察 补码，最高位为0，表示正数，最高位为1，表示负数；例如8位二进制数字表示范围为-128127，0000 0000 ~0111 1111表示0127，1000 00001111 1111表示-128-1，1000 0000的补码是原码取反+1，1000 0000取反0111 1111为127，127+1为128，表示-128","categories":[{"name":"知识篇","slug":"知识篇","permalink":"https://yizhenfeng2016.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AF%87/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://yizhenfeng2016.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"补码","slug":"补码","permalink":"https://yizhenfeng2016.github.io/tags/%E8%A1%A5%E7%A0%81/"}]},{"title":"Nginx部署Vue项目","slug":"Nginx部署Vue项目","date":"2022-03-05T17:21:12.000Z","updated":"2022-03-08T08:25:00.452Z","comments":true,"path":"posts/42b247b3.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/42b247b3.html","excerpt":"","text":"Nginx部署Vue项目1.Vue项目打包 # 打包正式环境 npm run build:prod # 打包预发布环境 npm run build:stage 2.将打包后的dist文件夹上传至服务器 # 远程上传 或 通过ftps工具上传 本次上传项目路径为 /usr/local/webapp/ 3.配置Nginx的conf文件 vim /etc/nginx/nginx.conf #在http{}修改如下 server { listen 80; server_name ip; #服务器ip或者域名 # 注意设定 root路径是有dist的 location / { root /usr/local/webapp/dist; index /index.html; } #跨域 ip和port自行替换 location /adminApi { proxy_pass http://ip:port; } } 4.注意Nginx的配置，例如添加header配置 5.使配置生效 nginx -s reload nginx -s stop nginx","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://yizhenfeng2016.github.io/tags/Nginx/"},{"name":"Vue","slug":"Vue","permalink":"https://yizhenfeng2016.github.io/tags/Vue/"}]},{"title":"安装HC开源物业系统版本（前后端分离）","slug":"安装HC开源物业系统版本（前后端分离）","date":"2022-03-05T17:20:34.000Z","updated":"2022-03-08T08:30:22.924Z","comments":true,"path":"posts/d4a04eff.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/d4a04eff.html","excerpt":"","text":"安装HC开源物业系统版本（前后端分离）1.日志出现 is not functionally dependent on columns in GROUP BY clause， 原因：/etc/my.conf配置出错 sql_mode = ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 修改成： sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 2.日志出现 The last packet sent successfully to the server was 0 milliseconds ago…… Caused by:javax.net.ssl.SSLHandshakeException: No appropriate protocol (protocol is disabled or ciph1.找到java安装目录 [hadoop@192 /]$ which java /bin/java [hadoop@192 /]$ ls -lrt /bin/java lrwxrwxrwx. 1 root root 22 4月 17 06:25 /bin/java -&gt; /etc/alternatives/java [hadoop@192 /]$ ls -lrt /etc/alternatives/java lrwxrwxrwx. 1 root root 72 4月 17 06:25 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64/jre/bin/java [hadoop@192 /]$ 2.注释掉SSL3配置文件($JAVA_HOME/jre/lib/security/java.security) 3.mysql远程授权 create user 'TT'@'%' identified by 'hc12345678'; create user 'hc_community'@'%' identified by 'hc12345678'; flush privileges; grant all privileges on `tt`.* to 'TT'@'%'; grant all privileges on `hc_community`.* to 'hc_community'@'%'; flush privileges; 4.日志出现 Can’t write; duplicate key in table ‘act_ge_bytearray’ 1.配置 etc/my.conf lower_case_table_names=1 //忽略大小写 5.出现 mysql 1049 -unknown database 原因：设置了lower_case_table_names=1 //忽略大小写，而建表或者建数据库时用了大写 解决办法：要先全部转换成小写 6.数据库mysql时区设置 --查看数据库时区设置mysql&gt; show variables like \"%time_zone%\"; +------------------+--------+ | Variable_name | Value | +------------------+--------+ | system_time_zone | UTC | | time_zone | SYSTEM | +------------------+--------+ 1.配置 /etc/my.conf default-time-zone = '+08:00' 7.设置hosts 然后修改/etc/hosts文件 vi /etc/hosts 打开之后的内容是： 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 然后你在里面加一行： 192.168.0.157 dev.api.java110.com 192.168.0.157 dev.java110.com 192.168.0.157 dev.redis.java110.com 192.168.0.157 dev.db.java110.com 重启网络: systemctl restart network 8.redis 远程连接不上 1.配置 redis.conf bind 127.0.0.1 改成 bind 0.0.0.0 9.redis设置密码 1.配置 redis.conf requirepass hc12345678","categories":[{"name":"开源系统篇","slug":"开源系统篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%BC%80%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%AF%87/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://yizhenfeng2016.github.io/tags/Java/"},{"name":"物业","slug":"物业","permalink":"https://yizhenfeng2016.github.io/tags/%E7%89%A9%E4%B8%9A/"},{"name":"HC","slug":"HC","permalink":"https://yizhenfeng2016.github.io/tags/HC/"}]},{"title":"Centos7 安装redis","slug":"Centos7-安装redis","date":"2022-03-05T17:19:56.000Z","updated":"2022-03-08T08:50:13.124Z","comments":true,"path":"posts/127bace5.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/127bace5.html","excerpt":"","text":"Centos7 安装redis1.安装 # cd /opt # wget http://download.redis.io/releases/redis-4.0.14.tar.gz # tar xzf redis-4.0.14.tar.gz # cd redis-4.0.14 # make -j4 &amp;&amp; make install # ll /usr/local/bin/redis* -rwxr-xr-x. 1 root root 2452112 May 2 21:40 /usr/local/bin/redis-benchmark -rwxr-xr-x. 1 root root 5777688 May 2 21:40 /usr/local/bin/redis-check-aof -rwxr-xr-x. 1 root root 5777688 May 2 21:40 /usr/local/bin/redis-check-rdb -rwxr-xr-x. 1 root root 2618136 May 2 21:40 /usr/local/bin/redis-cli lrwxrwxrwx. 1 root root 12 May 2 21:40 /usr/local/bin/redis-sentinel -&gt; redis-server -rwxr-xr-x. 1 root root 5777688 May 2 21:40 /usr/local/bin/redis-server 2.添加用户和目录 # useradd -r -s /sbin/nologin redis # mkdir -p /data/redis # chown -R redis:redis /data/redis # mkdir -p /etc/redis # cp redis.conf /etc/redis/ 3.修改redis.conf # vim /etc/redis/redis.conf # If you run Redis from upstart or systemd, Redis can interact with your # supervision tree. Options: # supervised no - no supervision interaction # supervised upstart - signal upstart by putting Redis into SIGSTOP mode # supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET # supervised auto - detect upstart or systemd method based on # UPSTART_JOB or NOTIFY_SOCKET environment variables # Note: these supervision methods only signal \"process is ready.\" # They do not enable continuous liveness pings back to your supervisor. supervised systemd # The working directory. # # The DB will be written inside this directory, with the filename specified # above using the 'dbfilename' configuration directive. # # The Append Only File will also be created inside this directory. # # Note that you must specify a directory here, not a file name. dir /data/redis # By default, if no \"bind\" configuration directive is specified, Redis listens # for connections from all the network interfaces available on the server. # It is possible to listen to just one or multiple selected interfaces using # the \"bind\" configuration directive, followed by one or more IP addresses. # # Examples: # # bind 192.168.1.100 10.0.0.1 # bind 127.0.0.1 ::1 # # ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the # internet, binding to all the interfaces is dangerous and will expose the # instance to everybody on the internet. So by default we uncomment the # following bind directive, that will force Redis to listen only into # the IPv4 lookback interface address (this means Redis will be able to # accept connections only from clients running into the same computer it # is running). # # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES # JUST COMMENT THE FOLLOWING LINE. # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ bind 127.0.0.1 # 允许远程连接，修改成 0.0.0.0. # Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other # commands. This might be useful in environments in which you do not trust # others with access to the host running redis-server. # # This should stay commented out for backward compatibility and because most # people do not need auth (e.g. they run their own servers). # # Warning: since Redis is pretty fast an outside user can try up to # 150k passwords per second against a good box. This means that you should # use a very strong password otherwise it will be very easy to break. # # requirepass password # Optional. 4.配置systemd # vim /usr/lib/systemd/system/redis.service [Unit] Description=Redis Server Documentation=https://redis.io/ After=network.target [Service] Type=simple User=redis Group=redis ExecStart=/usr/local/bin/redis-server /etc/redis/redis.conf ExecStop=/usr/local/bin/redis-cli shutdown [Install] WantedBy=multi-user.target 5.启动服务器 # systemctl daemon-reload # systemctl start redis # systemctl enable redis","categories":[{"name":"Linux篇","slug":"Linux篇","permalink":"https://yizhenfeng2016.github.io/categories/Linux%E7%AF%87/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://yizhenfeng2016.github.io/tags/Redis/"},{"name":"Centos7","slug":"Centos7","permalink":"https://yizhenfeng2016.github.io/tags/Centos7/"}]},{"title":"禅道开源版安装（包括mysql安装--使用tar.gz）","slug":"禅道开源版安装（包括mysql安装-使用tar-gz）","date":"2022-03-05T17:19:24.000Z","updated":"2022-03-08T08:36:10.446Z","comments":true,"path":"posts/ee7aa2f7.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/ee7aa2f7.html","excerpt":"","text":"禅道开源版安装 企业版试用半年： 下载：禅道16.4版本发布，支持导入Jira数据和SonarQube项目管理 - 禅道下载 - 禅道开源项目管理软件 (zentao.net) 选择适合您的安装方法 - 禅道开源版使用帮助 - 禅道开源项目管理软件 (zentao.net) 开源版安装：参考利用源码方式在centos7安装开源版禅道 - 简书 (jianshu.com) ​ rpm安装PHP7 rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm yum install php70w yum install php70w-pdo yum install php70w-pdo_mysql yum install php70w-json yum install php70w-filter yum install php70w-openssl yum install php70w-mbstring yum install php70w-zlib yum install php70w-curl yum install php70w-gd yum install php70w-iconv 安装Apache 1、检查是否安装过apache rpm -qa | grep httpd 若没有安装则继续安装： 2、安装apache yum install httpd-devel.x86_64 3、启动apache服务 systemctl restart httpd.service 注意事项： （1）这里若是启动失败，注意查看防火墙是否关闭，若没关闭，执行下列语句 firewall-cmd --permanent --zone=public --add-service=http firewall-cmd --permanent --zone=public --add-service=https firewall-cmd --reload （2）若提示端口被占用，杀掉占用端口的进程或者是修改apache配置文件 vi /etc/httpd/conf/httpd.conf ServerName 192.168.52.131:8989 Listen 8989 当然这里不一定非要设置为8989端口，也可以设置其他的没被占用的端口。 安装mysql5.7（卸载 mariadb(rpm -qa|grep mariadb)前，请将/usr/lib64/mysql/libmysqlclient.so.18复制到某个目录，卸载后重新复制回去，这个是用来动态加载pdo_mysql.so，如果没有这个文件会报加载错误，可以通过php -m查看php插件） 1.下载：http://uni.mirrors.163.com/mysql/Downloads/MySQL-5.7/ mysql-5.7.36-el7-x86_64.tar.gz 2.创建安装账户 useradd -s /bin/false -d /usr/local/mysql mysql id mysql 3.安装过程 [root@GeekDevOps ~]# tar -xvzf mysql-5.7.36-el7-x86_64.tar.gz -C /usr/local/mysql/ [root@GeekDevOps mysql]# cd /usr/local/mysql/mysql-5.7.36-el7-x86_64/ [root@GeekDevOps mysql-5.7.36-el7-x86_64]# mv * ../ [root@GeekDevOps mysql-5.7.36-el7-x86_64]# cd .. [root@GeekDevOps mysql]# rmdir mysql-5.7.36-el7-x86_64/ [root@GeekDevOps mysql]# mkdir data [root@GeekDevOps mysql]# chown -R mysql.mysql ../mysql [root@GeekDevOps mysql]# cd bin [root@GeekDevOps bin]# ./mysqld --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --initialize [root@GeekDevOps bin]# tail -100f ../data/error.log 2018-03-14T06:32:34.966407Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details). 2018-03-14T06:32:36.208273Z 0 [Warning] InnoDB: New log files created, LSN=45790 2018-03-14T06:32:36.367294Z 0 [Warning] InnoDB: Creating foreign key constraint system tables. 2018-03-14T06:32:36.522777Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 7c405e3f-2751-11e8-8be8-000c29fb0102. 2018-03-14T06:32:36.525594Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened. 2018-03-14T06:32:36.526540Z 1 [Note] A temporary password is generated for root@localhost: 7Eu;dsRqkY.3 [root@GeekDevOps bin]# cp ../support-files/mysql.server /etc/init.d/mysqld 4.配置过程（如果报没有/etc/my.cnf.d目录，就创建） [root@GeekDevOps ~]# vi /etc/my.cnf [mysqld] port = 3306 basedir = /usr/local/mysql datadir=/usr/local/mysql/data socket=/tmp/mysql.sock pid-file=/usr/local/mysql/data/mysql.pid log-error=/usr/local/mysql/data/error.log character_set_server=utf8 user=mysql max_connections=1500 symbolic-links=0 !includedir /etc/my.cnf.d 5.启动服务登录（报The server quit without updating PID file....,给目录授权 chown -R mysql.mysql /usr/local/mysql/data;chmod -R 755 /usr/local/mysql/data ） 添加软连接 [root@GeekDevOps ~]# ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql [root@GeekDevOps ~]# service mysqld start [root@GeekDevOps ~]# mysql -u root -p [root@GeekDevOps ~]# 输入初始化密码 &gt;mysql: set password=password('123456'); 6.设置开机自启 //将服务文件拷贝到init.d下，并重命名为mysqld cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld //赋予可执行权限 chmod +x /etc/init.d/mysqld //添加服务 chkconfig --add mysqld //显示服务列表 chkconfig --list 7.设置允许远程连接 //登录 mysql -u root -p //输入密码 use mysql; select host from user where user='root'; update user set host = '%' where user ='root'; flush privileges;//使配置立即生效 安装禅道 1、从禅道官网（https://www.zentao.net/）下载开源版文件。 2、解压得到zentaopms目录到webserver对应的目录，如apache的 /var/www/html/ 目录下。 3、通过浏览器访问http://ip:端口/zentaopms/www/index.php（如我的机器为http://1932.168.242。35:80/zentaopms/www/index.php），系统会自动转入安装程序 问题1：用php -m 查看php安装的插件（一般不用修改php.ini），如果加载pdo_mysql.so有误，报libmysqlclient.so.18: cannot open shared object file: …. find / -name libmysqlclient.so.18 //如果没有找到，是不是卸载mariadb前没有备份 如果有，添加软连接到/usr/lib;/usr/lib64 ln -s xxxx/libmysqlclient.so.18 /usr/lib/libmysqlclient.so.18 ln -s xxxx/libmysqlclient.so.18 /usr/lib64/libmysqlclient.so.18 php -m //查看是否有pdo_mysql.so 问题2：权限问题，要给全部权限 chmod 777 -R /var/www/html/zentaopms/temp/ chmod 777 -R /var/www/html/zentaopms/www/data/ 输入数据库密码 由于没有my.php文件，需要先创建文件，然后将上面的配置复制过去 选择登录禅道管理系统","categories":[{"name":"开源系统篇","slug":"开源系统篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%BC%80%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%AF%87/"}],"tags":[{"name":"禅道","slug":"禅道","permalink":"https://yizhenfeng2016.github.io/tags/%E7%A6%85%E9%81%93/"},{"name":"mysql","slug":"mysql","permalink":"https://yizhenfeng2016.github.io/tags/mysql/"},{"name":"PHP","slug":"PHP","permalink":"https://yizhenfeng2016.github.io/tags/PHP/"}]},{"title":"centos7 防火墙操作及开放端口","slug":"centos7-防火墙操作及开放端口","date":"2022-03-05T17:18:58.000Z","updated":"2022-03-08T08:51:47.238Z","comments":true,"path":"posts/1db93dbb.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/1db93dbb.html","excerpt":"","text":"centos7 防火墙操作及开放端口1.查看已开放的端口 firewall-cmd --list-ports 2.开放单个端口(开放后需要要重启防火墙才生效) firewall-cmd --zone=public --add-port=8080/tcp --permanent 3.开放多个端口(开放后需要要重启防火墙才生效) firewall-cmd --zone=public --add-port=20000-29999/tcp --permanent (--permanent 为永久生效，不加为单次有效(重启失效)) 4.关闭端口(关闭后需要要重启防火墙才生效) firewall-cmd --zone=public --remove-port=8080/tcp --permanent 5.查看端口是否打开 firewall-cmd --zone= public --query-port=80/tcp 6.查看防火墙状态(两种方式) firewall-cmd --state systemctl status firewalld 7.开启防火墙 systemctl start firewalld 8.重启防火墙 (两种方式) firewall-cmd --reload systemctl restart firewalld 9.设置开机启动防火墙 systemctl enable firewalld 10.查看防火墙设置开机自启是否成功 systemctl is-enabled firewalld;echo $? 11.禁止防火墙开机启动 systemctl disable firewalld 12.停止防火墙 systemctl stop firewalld","categories":[{"name":"Linux篇","slug":"Linux篇","permalink":"https://yizhenfeng2016.github.io/categories/Linux%E7%AF%87/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://yizhenfeng2016.github.io/tags/Centos7/"},{"name":"Firewall","slug":"Firewall","permalink":"https://yizhenfeng2016.github.io/tags/Firewall/"}]},{"title":"top和jstack查看java进程日志（包括线程）","slug":"top和jstack查看java进程日志（包括线程）","date":"2022-03-05T17:18:28.000Z","updated":"2022-03-08T08:46:38.223Z","comments":true,"path":"posts/d97048d6.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/d97048d6.html","excerpt":"","text":"top和jstack查看java进程日志（包括线程） 查看Java的pid ps -ef|grep java top shift+P按cpu排序 如果java是在docker中启动，需要进入docker docker ps docker exec -it xxx /bin/bash top 进入进程查看哪个线程占用最高 top -Hp pid 例如线程16占用最高，转换成16进制为0x10：在线进制转换 (oschina.net) 输出java进程的日志，并查找0x10 jstack pid |grep '0x10' -A 10 //查找含有0x10的行，并输出后10行 jstack pid |grep '0x10' -C 10 //查找含有0x10的行，并输出前后10行 jstack pid &gt;test.log //将日志写进test.log 将docker 日志复制到主机上 pwd //查看当前目录 docker cp xxx(容器id):/root/test.log /root","categories":[{"name":"Linux篇","slug":"Linux篇","permalink":"https://yizhenfeng2016.github.io/categories/Linux%E7%AF%87/"}],"tags":[{"name":"top","slug":"top","permalink":"https://yizhenfeng2016.github.io/tags/top/"},{"name":"jstack","slug":"jstack","permalink":"https://yizhenfeng2016.github.io/tags/jstack/"},{"name":"Java","slug":"Java","permalink":"https://yizhenfeng2016.github.io/tags/Java/"}]},{"title":"查看java命令之jps","slug":"查看java命令之jps","date":"2022-03-05T17:17:50.000Z","updated":"2022-03-08T08:47:49.009Z","comments":true,"path":"posts/8266feff.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/8266feff.html","excerpt":"","text":"查看java命令之jpsjps -ml //查看当前机器上运行的java进程（包名 + main method的参数） jps -mlv 查看当前机器上运行的java进程(包名 + main method的参数 + JVM参数)","categories":[{"name":"Linux篇","slug":"Linux篇","permalink":"https://yizhenfeng2016.github.io/categories/Linux%E7%AF%87/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://yizhenfeng2016.github.io/tags/Centos7/"},{"name":"jps","slug":"jps","permalink":"https://yizhenfeng2016.github.io/tags/jps/"}]},{"title":"查看java进程之jmap","slug":"查看java进程之jmap","date":"2022-03-05T17:16:59.000Z","updated":"2022-03-08T08:34:45.659Z","comments":true,"path":"posts/45a4cf73.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/45a4cf73.html","excerpt":"","text":"查看java进程之jmap 通过jmap命名查看堆中对象 jmap -histo:live 7869 | head -20 定位前20个 jmap -histo:live pid |head -20 //查看堆中对象,定位前20个 jmap -histo [pid] //查看JVM堆中对象详细占用情况 通过jmap -dump导出内存文件 jmap -dump:format=b,file=文件名 pid","categories":[{"name":"Linux篇","slug":"Linux篇","permalink":"https://yizhenfeng2016.github.io/categories/Linux%E7%AF%87/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://yizhenfeng2016.github.io/tags/Centos7/"},{"name":"jmap","slug":"jmap","permalink":"https://yizhenfeng2016.github.io/tags/jmap/"}]},{"title":"配置Java -jar 连接工具jvisualvm.exe","slug":"配置Java-jar-连接工具jvisualvm-exe","date":"2022-03-05T17:16:16.000Z","updated":"2022-03-08T08:47:13.526Z","comments":true,"path":"posts/c5d91d4.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/c5d91d4.html","excerpt":"","text":"配置Java -jar 连接工具jvisualvm.exejava -jar -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1199 -Dcom.sun.management.jmxremote.rmi.port=1199 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=192.168.242.33 -Dspring.profiles.active=dev -Xms1024m -Xmx1024m /root/service-job.jar","categories":[{"name":"Linux篇","slug":"Linux篇","permalink":"https://yizhenfeng2016.github.io/categories/Linux%E7%AF%87/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://yizhenfeng2016.github.io/tags/Centos7/"},{"name":"jvisualvm","slug":"jvisualvm","permalink":"https://yizhenfeng2016.github.io/tags/jvisualvm/"},{"name":"java","slug":"java","permalink":"https://yizhenfeng2016.github.io/tags/java/"}]},{"title":"google浏览器插件Header Editor使用","slug":"google浏览器插件Header-Editor使用","date":"2022-03-05T17:15:21.000Z","updated":"2022-03-08T08:49:55.731Z","comments":true,"path":"posts/cd28e5d7.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/cd28e5d7.html","excerpt":"","text":"google浏览器插件Header Editor使用","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"Header Editor","slug":"Header-Editor","permalink":"https://yizhenfeng2016.github.io/tags/Header-Editor/"},{"name":"Chrome 插件","slug":"Chrome-插件","permalink":"https://yizhenfeng2016.github.io/tags/Chrome-%E6%8F%92%E4%BB%B6/"}]},{"title":"查看centos7端口号占用情况","slug":"查看centos7端口号占用情况","date":"2022-03-05T17:14:40.000Z","updated":"2022-03-08T08:48:03.560Z","comments":true,"path":"posts/e4d527ef.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/e4d527ef.html","excerpt":"","text":"查看centos7端口号占用情况1.安装net-tools yum install net-tools 2.使用netstat netstat -nlp|grep 80 netstat -ntlp //查看当前所有tcp端口 netstat -an 查看网络端口","categories":[{"name":"Linux篇","slug":"Linux篇","permalink":"https://yizhenfeng2016.github.io/categories/Linux%E7%AF%87/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://yizhenfeng2016.github.io/tags/Centos7/"},{"name":"netstat","slug":"netstat","permalink":"https://yizhenfeng2016.github.io/tags/netstat/"}]},{"title":"使用git命令","slug":"使用git命令","date":"2022-03-05T17:14:03.000Z","updated":"2022-03-08T08:41:47.091Z","comments":true,"path":"posts/7371eea5.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/7371eea5.html","excerpt":"","text":"使用git命令1.git clone http://xxx.git 下载全部代码，一般是第一次使用 git clone -b **分支名仓库地址 **git clone -b v2.8.1 https://git.oschina.net/oschina/android-app.git 2.git pull 拉取更新 3.git status 查看当前git状态信息（查看是否有文件未提交） 被追踪的（tracked）:已经加入文档库 不被追踪的(untracked):没有加入文档库 忽略的(ignored):忽略那些不需要管理的文件夹或文件 4.git reset 不加参数(mixed)：保留工作目录，并清空暂存区 5.git fetch 是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中 6.git branch 列出当前分支清单 7.git checkout -f v2.1 -f，相当于 “–force”, 强制移动指针，忽略本地变化","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"git","slug":"git","permalink":"https://yizhenfeng2016.github.io/tags/git/"}]},{"title":"Jenkins配置allure插件","slug":"Jenkins配置allure插件","date":"2022-03-05T17:13:13.000Z","updated":"2022-03-08T08:21:19.454Z","comments":true,"path":"posts/49415e41.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/49415e41.html","excerpt":"","text":"Jenkins配置allure插件 安装allure插件 安装allure Jenkins配置allure安装路径 脚本执行完后输出报告：相对路径，完整路径=工作区目录+相对路径，生成的html报告路径固定为：工作区目录+allure-report","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://yizhenfeng2016.github.io/tags/Jenkins/"},{"name":"Allure插件","slug":"Allure插件","permalink":"https://yizhenfeng2016.github.io/tags/Allure%E6%8F%92%E4%BB%B6/"}]},{"title":"Jenkins从gitee拉取代码到本地构建计划","slug":"Jenkins从gitee拉取代码到本地构建计划","date":"2022-03-05T17:12:01.000Z","updated":"2022-03-08T08:20:54.639Z","comments":true,"path":"posts/18291ef1.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/18291ef1.html","excerpt":"","text":"Jenkins从gitee拉取代码到本地构建计划 添加凭证 在项目配置中，配置工作区目录（下载代码到这里），输入gitee地址 build 查看控制台日志","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://yizhenfeng2016.github.io/tags/Jenkins/"},{"name":"Gitee","slug":"Gitee","permalink":"https://yizhenfeng2016.github.io/tags/Gitee/"}]},{"title":"pycharm使用git上传代码到gitee","slug":"pycharm使用git上传代码到gitee","date":"2022-03-05T17:11:25.000Z","updated":"2022-03-08T08:26:48.936Z","comments":true,"path":"posts/a64cc551.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/a64cc551.html","excerpt":"","text":"Pycharm使用git上传代码到gitee pycharm安装git 如果系统没有安装git，pycharm点击VCS，选择版本控制，会提示要安装git，点击install pycharm安装gitee插件 安装完gitee插件后，在pycharm输入账号密码登录gitee 设置git 用户名和邮箱地址 在windows搜索git-bash，打开cmd命令 git config --global user.name \"一阵风2016\" git config --global user.email \"1029568690@qq.com\" 将本地项目代码第一次整体上传到gitee：VCS–导入到版本控制–Share Project On Gitee 更新代码到gitee：先commit到本地，然后push到gitee","categories":[{"name":"Python篇","slug":"Python篇","permalink":"https://yizhenfeng2016.github.io/categories/Python%E7%AF%87/"}],"tags":[{"name":"Gitee","slug":"Gitee","permalink":"https://yizhenfeng2016.github.io/tags/Gitee/"},{"name":"Pycharm","slug":"Pycharm","permalink":"https://yizhenfeng2016.github.io/tags/Pycharm/"}]},{"title":"Jmeter测试websocket","slug":"Jmeter测试websocket","date":"2022-03-05T17:09:20.000Z","updated":"2022-03-08T08:49:30.539Z","comments":true,"path":"posts/cf72ddf6.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/cf72ddf6.html","excerpt":"","text":"Jmeter测试websocket 参考文献：(57条消息) JMeter测试WebSocket的经验总结_smooth的博客-CSDN博客_jmeter websocket 配置","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"Jmeter","slug":"Jmeter","permalink":"https://yizhenfeng2016.github.io/tags/Jmeter/"},{"name":"websocket","slug":"websocket","permalink":"https://yizhenfeng2016.github.io/tags/websocket/"}]},{"title":"jmeter上数据图形显示","slug":"jmeter上数据图形显示","date":"2022-03-05T17:08:40.000Z","updated":"2022-03-08T08:21:54.651Z","comments":true,"path":"posts/24c970c0.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/24c970c0.html","excerpt":"","text":"jmeter上数据图形显示 通过cmd命令生成logfile，然后再用cmd命令生成html 参考文档：(57条消息) Jmeter和Ant的html报告优化及Dashboard Report介绍_smooth的博客-CSDN博客_jmeter报告优化 在jmeter.properties或者user.properties确认如下配置项： jmeter.save.saveservice.data_type=true jmeter.save.saveservice.label=true jmeter.save.saveservice.response_code=true jmeter.save.saveservice.response_data.on_error=true jmeter.save.saveservice.response_message=true jmeter.save.saveservice.successful=true jmeter.save.saveservice.thread_name=true jmeter.save.saveservice.time=true jmeter.save.saveservice.subresults=true jmeter.save.saveservice.assertions=true jmeter.save.saveservice.latency=true jmeter.save.saveservice.connect_time=true jmeter.save.saveservice.bytes=true jmeter.save.saveservice.sent_bytes=true jmeter.save.saveservice.thread_counts=true jmeter.save.saveservice.idle_time=true # Timestamp format - this only affects CSV output files # legitimate values: none, ms, or a format suitable for SimpleDateFormat jmeter.save.saveservice.timestamp_format=ms jmeter.save.saveservice.timestamp_format=yyyy/MM/dd HH:mm:ss.SSS 如果希望在Errors报告中展示更详细数据，需要确保如下配置： jmeter.save.saveservice.assertion_results_failure_message = true 直接用cmd命令生成logfile jmeter -n -t &lt;test JMX file&gt; -l &lt;test log file&gt; -e -o &lt;Path to output folder&gt; jmeter -n -t D:\\apache-jmeter-5.1.1\\bin\\测试websocket.jmx -l testLogFile -e -o ./output 直接用cmd命令将logfile生成html jmeter -g &lt;log file&gt; -o &lt;Path to output folder&gt; jmeter -g D:\\apache-jmeter-5.1.1\\bin\\testLogFile -o ./output jmeter（压测）+influxdb（数据库）+grafana 参考：(57条消息) 关于Jmeter长时间压测的可视化监控报告_smooth的博客-CSDN博客_jmeter 压测报告 influxdb包下载：InfluxDB Windows安装文件下载 (mirthsoft.com) grafana包下载：Index of grafana-local (huaweicloud.com) （1）influxdb配置 启动influxdb，通过CMD到influxdb的目录下，直接命令 influxd -config influxdb.conf 启动 创建数据库及用户 &gt; show databases &gt; CREATE DATABASE jmeter &gt; use jmeter &gt; create user “admin” with password ‘123456’ with all privileges 端口说明：2003端口：Jmeter往数据库发数据的端口，服务器端也是该端口接收数据，所以如果使用云服务器ECS的话，需要开启该2003端口8086端口，Grafana从数据库取数据的端口 (2) jmeter 配置（ 以上的配置，跟默认情况不一样的是，将summaryOnly设为false，useRegexpForSamplersList设为true，并配置了samplersList的正则表达试为JDBC.*，目的是可以监听所有以JDBC名称开头的Request请求） （3）grafana配置 针对grafana，很简单，到Grafana安装目录中的bin目录下，双击grafana-server.exe启动程序 访问http://localhost:3000，用admin（密码admin）登录，开始配置： 第一步、配置数据库，在设置–&gt;Data Sources，添加，配置以下画圈的部分就可以了，然后直接保存通过 第二步，在面板中添加Graph，选择Data Source为jmeter，在查询条件中，选择你要监控的指标，可以添选多个指标 ​ 配置好了，就能看到图了。如果看不到图，请用Jmeter多发几次请求。可以选择最右上角的监控时间段来精确化的监控指定时间段的测试数据： ​ ​ ​ ​","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"Jmeter","slug":"Jmeter","permalink":"https://yizhenfeng2016.github.io/tags/Jmeter/"},{"name":"数据展示","slug":"数据展示","permalink":"https://yizhenfeng2016.github.io/tags/%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA/"}]},{"title":"pycharm中点击安装requirements.txt出错","slug":"pycharm中点击安装requirements-txt出错","date":"2022-03-05T17:07:59.000Z","updated":"2022-03-08T08:27:40.713Z","comments":true,"path":"posts/547f1942.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/547f1942.html","excerpt":"","text":"pycharm中点击安装requirements.txt出错 报no-such option:–build-dir，原因是pycharm 依赖于–bulid-dir来安装包，但是在pip版本21.3.1后被移除了，办法：将pip版本降至21.2.4 用管理员打开cmd，在venv目录下执行： python.exe -m pip install pip==21.2.4 然后在pycharm进行安装 在使用cmd命令pip install安装时出现ssl 认证报错，请确认是否使用代理，我就因为要加速github，安装了DevSidecar工具 解决办法","categories":[{"name":"Python篇","slug":"Python篇","permalink":"https://yizhenfeng2016.github.io/categories/Python%E7%AF%87/"}],"tags":[{"name":"Pycharm","slug":"Pycharm","permalink":"https://yizhenfeng2016.github.io/tags/Pycharm/"}]},{"title":"moco-runner-1.3-standalone.jar使用","slug":"moco-runner-1-3-standalone-jar使用","date":"2022-03-05T17:07:24.000Z","updated":"2022-03-08T08:49:09.054Z","comments":true,"path":"posts/305f1f1.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/305f1f1.html","excerpt":"","text":"moco-runner-1.3-standalone.jar使用使用mock构建环境适用范围：当服务器还没有完成或者是使用第三方接口，需要模拟返回数据。 该jar下载地址：dreamhead/moco: Easy Setup Stub Server (github.com) http协议 创建一个.json文件：必须是数组[] [ { \"request\" : { \"method\" : \"post\", \"uri\":\"/api\", \"text\": { \"json\":\"{\\\"foo\\\":\\\"bar\\\"}\" } }, \"response\" : { \"json\" : { \"foo\" : \"bar\" } } } ] 启动服务： java -jar D:\\TestTools\\mock\\moco-runner-1.3.0-standalone.jar http -p 12306 -c D:\\TestTools\\mock\\responsedata\\http\\api4.json 调用： post http://127.0.0.1:12306/api {“foo”:”bar”}，则返回json数据 {“foo”:”bar”} 可以直接修改.json文件，不用重启服务 restful协议 创建一个.json文件：必须是数组[] [ { \"resource\": { \"name\": \"targets\", \"get\": [ { \"id\": \"1\", \"response\": { \"json\": { \"code\": 1, \"meassage\": \"foo\" } } } ] } } ] 启动服务，跟http一样 调用：get http://127.0.0.1:12306/targets/1 返回：{“code”:1,”message”:”foo”} websocket协议 创建一个.json文件：必须是数组[] [ { \"websocket\": { \"uri\": \"/ws\", \"sessions\": [ { \"request\": { \"text\": \"foo\" }, \"response\": { \"text\": \"bar\" } } ] } } ] 启动服务，跟http一样 可以使用在线工具测试websocket:Websocket在线测试-Websocket接口测试-Websocket模拟请求工具 (jsons.cn)","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"Moco-Runner","slug":"Moco-Runner","permalink":"https://yizhenfeng2016.github.io/tags/Moco-Runner/"},{"name":"接口","slug":"接口","permalink":"https://yizhenfeng2016.github.io/tags/%E6%8E%A5%E5%8F%A3/"}]},{"title":"Postman使用总结","slug":"Postman使用总结","date":"2022-03-05T17:06:53.000Z","updated":"2022-03-08T08:25:38.009Z","comments":true,"path":"posts/aac275fb.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/aac275fb.html","excerpt":"","text":"Postman使用总结 添加一个环境environments 设置环境变量或者全局变量 在某个请求后提取响应数据 var addtoken = JSON.parse(responseBody); pm.environment.set(\"token\", addtoken.data.accessToken); pm：表示postman对象 environment：表示环境变量 globals：表示全局变量 设置某个集合的下的全局headers 检查一下集合下所有请求，是否改过这个（默认是这个，继承父亲的headers） 配置能查看请求信息 ，如果参数和字符串类型，必须加“ ” 如果请求选了Raw，headers必须指定content-type:”application/json”,默认时“html/text”","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"Postman","slug":"Postman","permalink":"https://yizhenfeng2016.github.io/tags/Postman/"}]},{"title":"动态规划求解连续，最大问题","slug":"动态规划求解连续，最大问题","date":"2022-03-05T17:06:13.000Z","updated":"2022-03-08T08:36:57.356Z","comments":true,"path":"posts/9f2ad6f3.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/9f2ad6f3.html","excerpt":"","text":"动态规划求解连续，最大问题 问题： 解法","categories":[{"name":"知识篇","slug":"知识篇","permalink":"https://yizhenfeng2016.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AF%87/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"https://yizhenfeng2016.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"二分法边界条件处理","slug":"二分法边界条件处理","date":"2022-03-05T17:05:33.000Z","updated":"2022-03-08T08:38:12.734Z","comments":true,"path":"posts/d708f7c9.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/d708f7c9.html","excerpt":"","text":"二分法边界条件处理","categories":[{"name":"知识篇","slug":"知识篇","permalink":"https://yizhenfeng2016.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AF%87/"}],"tags":[{"name":"二分法","slug":"二分法","permalink":"https://yizhenfeng2016.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"}]},{"title":"chrome浏览器安装axure插件","slug":"chrome浏览器安装axure插件","date":"2022-03-05T17:04:27.000Z","updated":"2022-03-08T08:50:04.979Z","comments":true,"path":"posts/c9548500.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/c9548500.html","excerpt":"","text":"chrome浏览器安装axure插件 下载Axure RP Extension for Chrome 0.6.3，我将它放在百度云盘供大家使用 链接：https://pan.baidu.com/s/1Job9KmrlTrsZIdCy2iVOjw提取码：gzef 解压后找到.crx文件，打开chrome浏览器，找到”更多工具”–“扩展程序”，打开开发者模式，将.crx文件直接拖进去 在文件夹中找到index.html，并打开","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"Chrome 插件","slug":"Chrome-插件","permalink":"https://yizhenfeng2016.github.io/tags/Chrome-%E6%8F%92%E4%BB%B6/"},{"name":"Axure","slug":"Axure","permalink":"https://yizhenfeng2016.github.io/tags/Axure/"}]},{"title":"栈结构使用","slug":"栈结构使用","date":"2022-03-05T17:03:43.000Z","updated":"2022-03-08T08:44:05.502Z","comments":true,"path":"posts/69b4da18.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/69b4da18.html","excerpt":"","text":"栈结构使用由于栈结构的特殊性，非常适合做对称匹配类的题目 题目 class Solution: def isValid(self, s: str) -&gt; bool: #由于栈结构的特殊性，非常适合做对称匹配类的题目 stack=[] for item in s: if item == '(': stack.append(')') elif item == '[': stack.append(']') elif item == '{': stack.append('}') elif not stack or stack[-1] != item: #如果stack为空（说明没有左边括号），或者栈顶元素不等于当前元素 return False else: stack.pop() #栈顶元素等于当前元素，弹出 if stack: return False else: return True","categories":[{"name":"知识篇","slug":"知识篇","permalink":"https://yizhenfeng2016.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AF%87/"}],"tags":[{"name":"栈","slug":"栈","permalink":"https://yizhenfeng2016.github.io/tags/%E6%A0%88/"}]},{"title":"接口自动化框架","slug":"接口自动化框架","date":"2022-03-05T17:03:07.000Z","updated":"2022-03-08T08:39:32.594Z","comments":true,"path":"posts/8b3342ab.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/8b3342ab.html","excerpt":"","text":"接口自动化框架整体构架图： ​ ​ excel中用例设计 _, #编号 case_title, #用例标题 header, #请求头 path, #接口地址 method, #请求方式 parametric_key, #入参关键字 file_obj, #上传文件 data, #请求数据 extra, #提取参数 sql,#后置sql expect, #预期结果 程序执行过程设计 主要代码 run.py def run(): if os.path.exists('report/'): shutil.rmtree(path='report/') #移除整个目录 # 解决 issues 句柄无效 logger.remove() #add之前，清空logger logger.add(file_path['log'], enqueue=True, encoding='utf-8') #参数1：文件路径；参数2：使用异步写入；参数3：编码 logger.info(\"-----***** Starting *****-----\") pytest.main( args=[ 'test/test_api.py', f'--alluredir={file_path[\"report\"]}/data']) #设置pytest的执行参数，执行test/test_api.py文件，并生成allure格式的报告。main()括号内可传入执行参数和插件参数，通过[]进行分割，[]内的多个参数通过‘逗号,’进行分割 # 本地生成报告 os.system( f'allure generate {file_path[\"report\"]}/data -o {file_path[\"report\"]}/html --clean') #allure generate [xml_report_path] -o [html_report_path]//[html_report_path]根据自己需要定义文件夹，作者定义为：/report/html logger.success('-----***** 报告已生成 *****-----') test_api.py def test_main(cases): # cases对应conftest.py中的cases方法 # 发送请求 response, expect, sql = client.action(cases) # 断言操作 DataProcess.assert_result(response, expect) conftest.py @pytest.fixture(params=ReadFile.read_testcase()) #params：一个可选的参数列表，它将导致多个参数调用fixture功能和所有测试使用它 def cases(request): #执行每个值的列表，可以通过 request.param \"\"\"用例数据，测试方法参数入参该方法名 cases即可，实现同样的参数化 目前来看相较于@pytest.mark.parametrize 更简洁。 \"\"\" return request.param read_file.py @classmethod def read_testcase(cls): \"\"\" 读取excel格式的测试用例,返回一个生成器对象 :return 生成器 \"\"\" book = xlrd.open_workbook(cls.read_config(\"$.file_path.test_case\")) # 读取第一个sheet页 table = book.sheet_by_index(0) for norw in range(1, table.nrows): # 每行第4列 是否运行 if table.cell_value(norw, 4) != \"否\": # 每行第4列等于否将不读取内容 value = table.row_values(norw) value.pop(4) #将excel第五列数据去除 yield value class ReadFile: config_dict = None config_path = f\"{str(Path(__file__).parent.parent)}/config/config.yaml\" #配置文件路径：项目/config/config.yaml @classmethod def get_config_dict(cls) -&gt; dict: \"\"\"读取配置文件，并且转换成字典 return cls.config_dict \"\"\" if cls.config_dict is None: # 指定编码格式解决，win下跑代码抛出错误 with open(cls.config_path, \"r\", encoding=\"utf-8\") as file: cls.config_dict = yaml.load(file.read(), Loader=yaml.FullLoader) return cls.config_dict @classmethod def read_config(cls, expr: str = \".\") -&gt; dict: \"\"\"默认读取config目录下的config.yaml配置文件，根据传递的expr jsonpath表达式可任意返回任何配置项 :param expr: 提取表达式, 使用jsonpath语法,默认值提取整个读取的对象 return 根据表达式返回的值 \"\"\" return extractor(cls.get_config_dict(), expr) client.py class Transmission: PARAMS: str = \"params\" DATA: str = \"data\" JSON: str = \"json\" class Client(Session): def action(self, case: list, env: str = \"dev\") -&gt; Any: #类型注解，从3.5版本开始 \"\"\"处理case数据，转换成可用数据发送请求 :param case: 读取出来的每一行用例内容，可进行解包 :param env: 环境名称 默认使用config.yaml server下的 dev 后面的基准地址 return: 响应结果， 预期结果 \"\"\" ( _, #编号 case_title, #用例标题 header, #请求头 path, #接口地址 method, #请求方式 parametric_key, #入参关键字 file_obj, #上传文件 data, #请求数据 extra, #提取参数 sql,#后置sql expect, #预期结果 ) = case #将excel表格中每一行数据的每一列进行拆解 logger.debug( f\"用例进行处理前数据: \\n 接口路径: {path} \\n 请求参数: {data} \\n 提取参数: {extra} \\n 后置sql: {sql} \\n 预期结果: {expect} \\n \" ) #f\"\",其效果类似于str.format(),从3.6版本开始 # allure报告 用例标题 allure_title(case_title) # 处理url、header、data、file、的前置方法 url = DataProcess.handle_path(path, env) header = DataProcess.handle_header(header) data = DataProcess.handle_data(data) allure_step(\"请求数据\", data) file = DataProcess.handler_files(file_obj) # 发送请求 response = self._request(url, method, parametric_key, header, data, file) # 提取参数 DataProcess.handle_extra(extra, response) return response, expect, sql def _request( self, url, method, parametric_key, header=None, data=None, file=None ) -&gt; dict: \"\"\" :param method: 请求方法 :param url: 请求url :param parametric_key: 入参关键字， params(查询参数类型，明文传输，一般在url?参数名=参数值), data(一般用于form表单类型参数) json(一般用于json类型请求参数) :param data: 参数数据，默认等于None :param file: 文件对象 :param header: 请求头 :return: 返回res对象 \"\"\" if parametric_key == Transmission.PARAMS: extra_args = {Transmission.PARAMS: data} elif parametric_key == Transmission.DATA: extra_args = {Transmission.DATA: data} elif parametric_key == Transmission.JSON: extra_args = {Transmission.JSON: data} else: raise ValueError(\"可选关键字为params, json, data\") res = self.request( method=method, url=url, files=file, headers=header, **extra_args ) response = res.json() logger.info( f\"\\n最终请求地址:{res.url}\\n请求方法:{method}\\n请求头:{header}\\n请求参数:{data}\\n上传文件:{file}\\n响应数据:{response}\" ) allure_step_no(f\"响应耗时(s): {res.elapsed.total_seconds()}\") allure_step(\"响应结果\", response) return response client = Client() data_process.py class DataProcess: # 存放提取参数的池子 extra_pool = {} header = ReadFile.read_config('$.request_headers') @classmethod def handle_path(cls, path_str: str, env: str) -&gt; str: \"\"\"路径参数处理 :param path_str: 带提取表达式的字符串 /${id}/state/${create_time} :param env: 环境名称， 对应的是环境基准地址 上述内容表示，从extra_pool字典里取到key为id 对应的值，假设是500，后面${create_time} 类似， 假设其值为 1605711095 最终提取结果 return /511/state/1605711095 \"\"\" url = ReadFile.read_config( f'$.server.{env}') + rep_expr(path_str, cls.extra_pool) allure_step_no(f'请求地址: {url}') return url @classmethod def handle_header(cls, header_str: str) -&gt; dict: \"\"\"处理header， 将用例中的表达式处理后 追加到基础header中 :header_str: 用例栏中的header return header: \"\"\" if header_str == '': header_str = '{}' cls.header.update(cls.handle_data(header_str)) allure_step('请求头', cls.header) return cls.header @classmethod def handler_files(cls, file_obj: str) -&gt; object: \"\"\"file对象处理方法 :param file_obj: 上传文件使用，格式：接口中文件参数的名称:\"文件路径地址\"/[\"文件地址1\", \"文件地址2\"] 实例- 单个文件: &amp;file&amp;D: \"\"\" if file_obj != '': for k, v in convert_json(file_obj).items(): # 多文件上传 if isinstance(v, list): files = [] for path in v: files.append((k, (open(path, 'rb')))) else: # 单文件上传 files = {k: open(v, 'rb')} allure_step('上传文件', file_obj) return files @classmethod def handle_data(cls, variable: str) -&gt; dict: \"\"\"请求数据处理 :param variable: 请求数据，传入的是可转换字典/json的字符串,其中可以包含变量表达式 return 处理之后的json/dict类型的字典数据 \"\"\" if variable != '': data = rep_expr(variable, cls.extra_pool) variable = convert_json(data) return variable @classmethod def handle_sql(cls, sql: str, db: DB): \"\"\" 处理sql，如果sql执行的结果不会空，执行sql的结果和参数池合并 :param sql: 支持单条或者多条sql，其中多条sql使用 ; 进行分割 多条sql,在用例中填写方式如下select * from user; select * from goods 每条sql语句之间需要使用 ; 来分割 单条sql,select * from user 或者 select * from user; :param db: 数据库连接对象 :return: \"\"\" sql = rep_expr(sql, cls.extra_pool) for sql in sql.split(\";\"): sql = sql.strip() if sql == '': continue # 查后置sql result = db.execute_sql(sql) allure_step(f'执行sql: {sql}', result) logger.info(f'执行sql: {sql} \\n 结果: {result}') if result is not None: # 将查询结果添加到响应字典里面，作用在，接口响应的内容某个字段 直接和数据库某个字段比对，在预期结果中 # 使用同样的语法提取即可 cls.extra_pool.update(result) @classmethod def handle_extra(cls, extra_str: str, response: dict): \"\"\" 处理提取参数栏 :param extra_str: excel中 提取参数栏内容，需要是 {\"参数名\": \"jsonpath提取式\"} 可以有多个 :param response: 当前用例的响应结果字典 \"\"\" if extra_str != '': extra_dict = convert_json(extra_str) for k, v in extra_dict.items(): cls.extra_pool[k] = extractor(response, v) #将提取到参数放进变量池，以便后面使用 logger.info(f'加入依赖字典,key: {k}, 对应value: {v}') @classmethod def assert_result(cls, response: dict, expect_str: str): \"\"\" 预期结果实际结果断言方法 :param response: 实际响应结果 :param expect_str: 预期响应内容，从excel中读取 return None \"\"\" # 后置sql变量转换 allure_step(\"当前可用参数池\", cls.extra_pool) expect_str = rep_expr(expect_str, cls.extra_pool) expect_dict = convert_json(expect_str) index = 0 for k, v in expect_dict.items(): # 获取需要断言的实际结果部分 actual = extractor(response, k) index += 1 logger.info( f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}') allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}') try: assert actual == v except AssertionError: raise AssertionError( f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}') tools/init.py def exec_func(func: str) -&gt; str: \"\"\"执行函数(exec可以执行Python代码) :params func 字符的形式调用函数 : return 返回的将是个str类型的结果 \"\"\" # 得到一个局部的变量字典，来修正exec函数中的变量，在其他函数内部使用不到的问题 loc = locals() exec(f\"result = {func}\") #执行函数，返回数据赋值给result return str(loc['result']) def extractor(obj: dict, expr: str = '.') -&gt; Any: \"\"\" 根据表达式提取字典中的value，表达式, . 提取字典所有内容， $.case 提取一级字典case， $.case.data 提取case字典下的data :param obj :json/dict类型数据 :param expr: 表达式, . 提取字典所有内容， $.case 提取一级字典case， $.case.data 提取case字典下的data $.0.1 提取字典中的第一个列表中的第二个的值 \"\"\" try: result = jsonpath(obj, expr)[0] #使用jsonpath来提取json内容，JsonPath用符号$表示最外层对象，类似于Xpath中的根元素，.相当与/；..相当于// except Exception as e: logger.error(f'{expr} - 提取不到内容，丢给你一个错误！{e}') result = expr return result def rep_expr(content: str, data: dict) -&gt; str: \"\"\"从请求参数的字符串中，使用正则的方法找出合适的字符串内容并进行替换 :param content: 原始的字符串内容 :param data: 提取的参数变量池 return content： 替换表达式后的字符串 \"\"\" content = Template(content).safe_substitute(data) #对类似于${username}用data字典中的key为username进行替换 for func in re.findall('\\\\${(.*?)}', content): #查找是否还有${函数名}的变量，如果有函数执行后进行结果替换，就进行替换，例如是md5(123456) try: content = content.replace('${%s}' % func, exec_func(func)) except Exception as e: logger.error(e) return content def convert_json(dict_str: str) -&gt; dict: \"\"\" :param dict_str: 长得像字典的字符串 return json格式的内容 \"\"\" try: if 'None' in dict_str: dict_str = dict_str.replace('None', 'null') elif 'True' in dict_str: dict_str = dict_str.replace('True', 'true') elif 'False' in dict_str: dict_str = dict_str.replace('False', 'false') dict_str = json.loads(dict_str) except Exception as e: if 'null' in dict_str: dict_str = dict_str.replace('null', 'None') elif 'true' in dict_str: dict_str = dict_str.replace('true', 'True') elif 'false' in dict_str: dict_str = dict_str.replace('false', 'False') dict_str = eval(dict_str) logger.error(e) return dict_str def allure_title(title: str) -&gt; None: \"\"\"allure中显示的用例标题\"\"\" allure.dynamic.title(title) def allure_step(step: str, var: str) -&gt; None: \"\"\" :param step: 步骤及附件名称 :param var: 附件内容 \"\"\" with allure.step(step): allure.attach( json.dumps( var, ensure_ascii=False, indent=4), step, allure.attachment_type.JSON) def allure_step_no(step: str): \"\"\" 无附件的操作步骤 :param step: 步骤名称 :return: \"\"\" with allure.step(step): pass 关键思想 将某些关键的返回数据放进一个类（该类没有实例）的变量池（字典），供后面接口共用 class DataProcess: # 存放提取参数的池子 extra_pool = {} header = ReadFile.read_config('$.request_headers') @classmethod def handle_path(cls, path_str: str, env: str) -&gt; str: \"\"\"路径参数处理 :param path_str: 带提取表达式的字符串 /${id}/state/${create_time} :param env: 环境名称， 对应的是环境基准地址 上述内容表示，从extra_pool字典里取到key为id 对应的值，假设是500，后面${create_time} 类似， 假设其值为 1605711095 最终提取结果 return /511/state/1605711095 \"\"\" url = ReadFile.read_config( f'$.server.{env}') + rep_expr(path_str, cls.extra_pool) allure_step_no(f'请求地址: {url}') return url 底层请求只建一个单例 init.py from .client import client client.py class Client(Session): def action(self, case: list, env: str = \"dev\") -&gt; Any: #类型注解，从3.5版本开始 \"\"\"处理case数据，转换成可用数据发送请求 :param case: 读取出来的每一行用例内容，可进行解包 :param env: 环境名称 默认使用config.yaml server下的 dev 后面的基准地址 return: 响应结果， 预期结果 \"\"\" pass def _request( self, url, method, parametric_key, header=None, data=None, file=None ) -&gt; dict: \"\"\" :param method: 请求方法 :param url: 请求url :param parametric_key: 入参关键字， params(查询参数类型，明文传输，一般在url?参数名=参数值), data(一般用于form表单类型参数) json(一般用于json类型请求参数) :param data: 参数数据，默认等于None :param file: 文件对象 :param header: 请求头 :return: 返回res对象 \"\"\" pass client = Client() 将excel的参数分成三类，一类含有函数名：${函数()}，例如${md5(“123456”)} 提取后用exec执行后返回结果，相当于jmeter中的函数助手；一类含有变量名：${userId}，通过变量池中进行替换；一类含有位置的变量名，主要是提取返回信息，放进变量池或者预期结果进行对比 def exec_func(func: str) -&gt; str: \"\"\"执行函数(exec可以执行Python代码) :params func 字符的形式调用函数 : return 返回的将是个str类型的结果 \"\"\" # 得到一个局部的变量字典，来修正exec函数中的变量，在其他函数内部使用不到的问题 loc = locals() exec(f\"result = {func}\") return str(loc['result']) def md5(s:str) -&gt; str: txt=\"\" md=hashlib.md5() md.update(s.encode(encoding='utf-8')) txt=md.hexdigest() print(s) print(txt) return txt exec_func(\"md5('123456')\") #123456;e10adc3949ba59abbe56e057f20f883e def rep_expr(content: str, data: dict) -&gt; str: \"\"\"从请求参数的字符串中，使用正则的方法找出合适的字符串内容并进行替换 :param content: 原始的字符串内容 :param data: 提取的参数变量池 return content： 替换表达式后的字符串 \"\"\" content = Template(content).safe_substitute(data) #对类似于${username}用data字典中的key为username进行替换 for func in re.findall('\\\\${(.*?)}', content): #查找是否还有${函数名}的变量，如果有函数执行后进行结果替换，就进行替换，例如是md5(123456) try: content = content.replace('${%s}' % func, exec_func(func)) except Exception as e: logger.error(e) return content def extractor(obj: dict, expr: str = '.') -&gt; Any: \"\"\" 根据表达式提取字典中的value，表达式, . 提取字典所有内容， $.case 提取一级字典case， $.case.data 提取case字典下的data :param obj :json/dict类型数据 :param expr: 表达式, . 提取字典所有内容， $.case 提取一级字典case， $.case.data 提取case字典下的data $.0.1 提取字典中的第一个列表中的第二个的值 \"\"\" try: result = jsonpath(obj, expr)[0] #使用jsonpath来提取json内容，JsonPath用符号$表示最外层对象，类似于Xpath中的根元素，.相当与/；..相当于// except Exception as e: logger.error(f'{expr} - 提取不到内容，丢给你一个错误！{e}') result = expr return result","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"接口","slug":"接口","permalink":"https://yizhenfeng2016.github.io/tags/%E6%8E%A5%E5%8F%A3/"},{"name":"自动化","slug":"自动化","permalink":"https://yizhenfeng2016.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"python","slug":"python","permalink":"https://yizhenfeng2016.github.io/tags/python/"},{"name":"allure","slug":"allure","permalink":"https://yizhenfeng2016.github.io/tags/allure/"},{"name":"pytest","slug":"pytest","permalink":"https://yizhenfeng2016.github.io/tags/pytest/"}]},{"title":"安装Typora并使用gitee做图床","slug":"安装Typora并使用gitee做图床","date":"2022-03-05T17:01:53.000Z","updated":"2022-03-08T08:29:34.169Z","comments":true,"path":"posts/f77593bb.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/f77593bb.html","excerpt":"","text":"安装Typora # 使用gitee镜像下载 https://gitee.com/typora-mirror/Typora-Mirror/releases 安装Node.js https://nodejs.org/en/download/ 安装PicGo并配置 #下载并安装 https://github.com/Molunerfinn/PicGo/releases #安装gitee插件 #配置gitee图床 #修改server监听端口 配置Typora","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"Gitee","slug":"Gitee","permalink":"https://yizhenfeng2016.github.io/tags/Gitee/"},{"name":"Typora","slug":"Typora","permalink":"https://yizhenfeng2016.github.io/tags/Typora/"}]},{"title":"pycharm编辑器设置py文件开头样式","slug":"pycharm编辑器设置py文件开头样式","date":"2022-03-05T17:01:06.000Z","updated":"2022-03-08T08:26:28.839Z","comments":true,"path":"posts/ddeeb770.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/ddeeb770.html","excerpt":"","text":"pycharm编辑器设置py文件开头样式 文件–设置–编辑器–文件和代码模板–Python Script","categories":[{"name":"Python篇","slug":"Python篇","permalink":"https://yizhenfeng2016.github.io/categories/Python%E7%AF%87/"}],"tags":[{"name":"Pycharm","slug":"Pycharm","permalink":"https://yizhenfeng2016.github.io/tags/Pycharm/"}]},{"title":"BeautifulReport生成的报告打开没有内容及一张图片显示不出来","slug":"BeautifulReport生成的报告打开没有内容及一张图片显示不出来","date":"2022-03-05T16:59:14.000Z","updated":"2022-03-06T06:36:38.639Z","comments":true,"path":"posts/45e210fa.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/45e210fa.html","excerpt":"","text":"BeautifulReport生成的报告打开没有内容及一张图片显示不出来 用BeautifulReport==0.1.3，用官网的例子的生成html报告，打开发现没有内容，一开始以为是程序有问题，后来经过查找，发现是js和css引用访问不了 F12查看 解决办法：下载到本地，直接引用 一张图片显示不了，是因为beautifulreport.py，源码有问题 改成","categories":[{"name":"Python篇","slug":"Python篇","permalink":"https://yizhenfeng2016.github.io/categories/Python%E7%AF%87/"}],"tags":[{"name":"BeautifulReport","slug":"BeautifulReport","permalink":"https://yizhenfeng2016.github.io/tags/BeautifulReport/"}]},{"title":"Allure 报告中显示问题，修改源码","slug":"Allure-报告中显示问题，修改源码","date":"2022-03-05T16:53:38.000Z","updated":"2022-03-08T08:43:55.403Z","comments":true,"path":"posts/63b7ef00.html","link":"","permalink":"https://yizhenfeng2016.github.io/posts/63b7ef00.html","excerpt":"","text":"Allure 报告中显示问题，修改源码 allure.title去掉后方的参数化显示 解决办法： listener.py 文件位置：Lib\\site-packages\\allure_pytest\\listener.py （第三方包所在的LIb目录） 将下图中红色部分test_result.parameters.extend([]) 中参数改成空列表就行了","categories":[{"name":"Python篇","slug":"Python篇","permalink":"https://yizhenfeng2016.github.io/categories/Python%E7%AF%87/"}],"tags":[{"name":"Allure","slug":"Allure","permalink":"https://yizhenfeng2016.github.io/tags/Allure/"}]}],"categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"},{"name":"工具篇","slug":"工具篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"},{"name":"Linux篇","slug":"Linux篇","permalink":"https://yizhenfeng2016.github.io/categories/Linux%E7%AF%87/"},{"name":"知识篇","slug":"知识篇","permalink":"https://yizhenfeng2016.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AF%87/"},{"name":"开源系统篇","slug":"开源系统篇","permalink":"https://yizhenfeng2016.github.io/categories/%E5%BC%80%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%AF%87/"},{"name":"Python篇","slug":"Python篇","permalink":"https://yizhenfeng2016.github.io/categories/Python%E7%AF%87/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://yizhenfeng2016.github.io/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"https://yizhenfeng2016.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"漏洞","slug":"漏洞","permalink":"https://yizhenfeng2016.github.io/tags/%E6%BC%8F%E6%B4%9E/"},{"name":"AppScan","slug":"AppScan","permalink":"https://yizhenfeng2016.github.io/tags/AppScan/"},{"name":"Nessus","slug":"Nessus","permalink":"https://yizhenfeng2016.github.io/tags/Nessus/"},{"name":"Centos7","slug":"Centos7","permalink":"https://yizhenfeng2016.github.io/tags/Centos7/"},{"name":"network","slug":"network","permalink":"https://yizhenfeng2016.github.io/tags/network/"},{"name":"docker","slug":"docker","permalink":"https://yizhenfeng2016.github.io/tags/docker/"},{"name":"操作系统","slug":"操作系统","permalink":"https://yizhenfeng2016.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"补码","slug":"补码","permalink":"https://yizhenfeng2016.github.io/tags/%E8%A1%A5%E7%A0%81/"},{"name":"Nginx","slug":"Nginx","permalink":"https://yizhenfeng2016.github.io/tags/Nginx/"},{"name":"Vue","slug":"Vue","permalink":"https://yizhenfeng2016.github.io/tags/Vue/"},{"name":"Java","slug":"Java","permalink":"https://yizhenfeng2016.github.io/tags/Java/"},{"name":"物业","slug":"物业","permalink":"https://yizhenfeng2016.github.io/tags/%E7%89%A9%E4%B8%9A/"},{"name":"HC","slug":"HC","permalink":"https://yizhenfeng2016.github.io/tags/HC/"},{"name":"Redis","slug":"Redis","permalink":"https://yizhenfeng2016.github.io/tags/Redis/"},{"name":"禅道","slug":"禅道","permalink":"https://yizhenfeng2016.github.io/tags/%E7%A6%85%E9%81%93/"},{"name":"mysql","slug":"mysql","permalink":"https://yizhenfeng2016.github.io/tags/mysql/"},{"name":"PHP","slug":"PHP","permalink":"https://yizhenfeng2016.github.io/tags/PHP/"},{"name":"Firewall","slug":"Firewall","permalink":"https://yizhenfeng2016.github.io/tags/Firewall/"},{"name":"top","slug":"top","permalink":"https://yizhenfeng2016.github.io/tags/top/"},{"name":"jstack","slug":"jstack","permalink":"https://yizhenfeng2016.github.io/tags/jstack/"},{"name":"jps","slug":"jps","permalink":"https://yizhenfeng2016.github.io/tags/jps/"},{"name":"jmap","slug":"jmap","permalink":"https://yizhenfeng2016.github.io/tags/jmap/"},{"name":"jvisualvm","slug":"jvisualvm","permalink":"https://yizhenfeng2016.github.io/tags/jvisualvm/"},{"name":"java","slug":"java","permalink":"https://yizhenfeng2016.github.io/tags/java/"},{"name":"Header Editor","slug":"Header-Editor","permalink":"https://yizhenfeng2016.github.io/tags/Header-Editor/"},{"name":"Chrome 插件","slug":"Chrome-插件","permalink":"https://yizhenfeng2016.github.io/tags/Chrome-%E6%8F%92%E4%BB%B6/"},{"name":"netstat","slug":"netstat","permalink":"https://yizhenfeng2016.github.io/tags/netstat/"},{"name":"git","slug":"git","permalink":"https://yizhenfeng2016.github.io/tags/git/"},{"name":"Jenkins","slug":"Jenkins","permalink":"https://yizhenfeng2016.github.io/tags/Jenkins/"},{"name":"Allure插件","slug":"Allure插件","permalink":"https://yizhenfeng2016.github.io/tags/Allure%E6%8F%92%E4%BB%B6/"},{"name":"Gitee","slug":"Gitee","permalink":"https://yizhenfeng2016.github.io/tags/Gitee/"},{"name":"Pycharm","slug":"Pycharm","permalink":"https://yizhenfeng2016.github.io/tags/Pycharm/"},{"name":"Jmeter","slug":"Jmeter","permalink":"https://yizhenfeng2016.github.io/tags/Jmeter/"},{"name":"websocket","slug":"websocket","permalink":"https://yizhenfeng2016.github.io/tags/websocket/"},{"name":"数据展示","slug":"数据展示","permalink":"https://yizhenfeng2016.github.io/tags/%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA/"},{"name":"Moco-Runner","slug":"Moco-Runner","permalink":"https://yizhenfeng2016.github.io/tags/Moco-Runner/"},{"name":"接口","slug":"接口","permalink":"https://yizhenfeng2016.github.io/tags/%E6%8E%A5%E5%8F%A3/"},{"name":"Postman","slug":"Postman","permalink":"https://yizhenfeng2016.github.io/tags/Postman/"},{"name":"动态规划","slug":"动态规划","permalink":"https://yizhenfeng2016.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"二分法","slug":"二分法","permalink":"https://yizhenfeng2016.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"},{"name":"Axure","slug":"Axure","permalink":"https://yizhenfeng2016.github.io/tags/Axure/"},{"name":"栈","slug":"栈","permalink":"https://yizhenfeng2016.github.io/tags/%E6%A0%88/"},{"name":"自动化","slug":"自动化","permalink":"https://yizhenfeng2016.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"python","slug":"python","permalink":"https://yizhenfeng2016.github.io/tags/python/"},{"name":"allure","slug":"allure","permalink":"https://yizhenfeng2016.github.io/tags/allure/"},{"name":"pytest","slug":"pytest","permalink":"https://yizhenfeng2016.github.io/tags/pytest/"},{"name":"Typora","slug":"Typora","permalink":"https://yizhenfeng2016.github.io/tags/Typora/"},{"name":"BeautifulReport","slug":"BeautifulReport","permalink":"https://yizhenfeng2016.github.io/tags/BeautifulReport/"},{"name":"Allure","slug":"Allure","permalink":"https://yizhenfeng2016.github.io/tags/Allure/"}]}